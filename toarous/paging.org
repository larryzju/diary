* Overview

** Functionality

- memory protection: processes cannot trample other processes' data or code
- virtual memory: unique address space for processes

** virtual address and physical address

Parts of the virtual address space are mapped to physical memory, and parts are unmapped.
If you try to access an unmapped part, the processor raises a /page fault/.

** MMU

MMU is short for memory management unit. It is a hardware that handles
all memory mappings due to segmentation and paging, forming a layer
between CPU and memory.

It read the page directory and page tables set by OS to perform the
address translating.

Process can only see memory that it has, it cannot modify or copy any
other application's memory.

** Segment

Segmentation can also provides virtual memory. It is becoming obsolete.

** feature

- memory-mapped IO
- paging out to disk (缓存硬盘存储）

** Intel CPU

- x86-32 支持 32 位虚拟地址空间
- x86-64 处理器支持 48-bit 虚拟地址空间（256 TiB）

64 位平台下已经用 page-level protection 替换了 segmentation protection。
32 位中两者被同时使用。

* Virtual Address Mapping

Virtual address space is split into blocks called /pages/, which are usually 4KB in size.
Pages can be mapped on to /frames/ - equally sized blocks of physical memory

Each process normally has a different set of page mappings. Each page
has a corresponding descriptor word - /page table entry/ or just =PTE=.

To represent 4GB memory, we need 1M PTE (4MB space) which is too
expensive. So Intel use a 2-tier system:
- page directory :: a 4KB large table, each entry of which points to a /page table/
- page table :: a 4KB large table and each entry is a /page table entry/

So if a page table has no entries, it can be freed and it's =present=
flag unset in the page directory.

#+CAPTION: Page 2-tier layout
[[./images/page_directory.png]]

CR3 register point to the page directory. 

A virtual address can be split into 3 parts
- page directory index : select the page table
- page table index : select the page table entry and get the physical frame index
- VPO (virtual page offset): is equal to the physical frame offset

#+CAPTION: Paging architecture
[[./images/paging-architecture.png]]


** Code Illustration

#+BEGIN_SRC go
  type PageDirectoryEntry struct {
          PageTableAddress uintptr:20   // 4-KiB aligned
          Avail    uintptr:3            // not used by the processor
          Gbit     uintptr:1
          PageSize uintptr:1            // 1 for 4MiB, 0 for 4 KiB
          Padbit   uintptr:1
          Accessed uintptr:1            // set if it has been read or write to
          CacheDisable uintptr:1
          WriteThrough uintptr:1        // switch for write-through cache
          Supervisor   uintptr:1        // 1 for all
          ReadWrite    uintptr:1        // enable to read/write
          Present      uintptr:1        // whether in physical memory
  }

  func (pd *PageDirectoryEntry) AddressBasis() uintptr {
          if pd.PageSize == 1 {
                  return (pd.PageTableAddress >> 10) * MBytes * 4
          } else {
                  return pd.PageTableAddress * KBytes * 4
          }
  }

  // PageTableEntry is similar to page directory entries
  type PageTableEntry struct {
          PhysicalPageAddress uintptr:20 // 4-KiB aligned
          Avail    uintptr:3            // not used by the processor
          Global   uintptr:1            
          Padbit   uintptr:1
          Dirty    uintptr:1            // page has been written to
          Accessed uintptr:1
          CacheDisable uintptr:1
          WriteThrough uintptr:1        // switch for write-through cache
          Supervisor   uintptr:1        // 1 for all
          ReadWrite    uintptr:1        // enable to read/write
          Present      uintptr:1        // whether in physical memory
  }
#+END_SRC

** Higher Half Kernel

The kernel is loaded at location x, but when paging is initialized the
MMU is told to map location x to 0xC0000000.

Linux's kernel reside at virtual addresses 0xC0000000 - 0xFFFFFFFF of
every address space. Leaving the range 0x00000000 - 0xBFFFFFFF for
user code, data, stacks, libraries, etc.

*** why

- to set up VM86 processes since the region below 1MB is userrspace
- user applications are not dependent on how much memory is kernel space
- ..

** PTE

#+CAPTION: Page Table Entry
[[./images/paging_pte.png]]

| Field         | Description                                                    |
|---------------+----------------------------------------------------------------|
| P             | page is present in memory                                      |
| R/W           | writable                                                       |
| U/S           | user-mode or supervisor-mode                                   |
| Reversed      | must not be trampled                                           |
| A             | page has been accessed                                         |
| D             | page has been written to (dirty)                               |
| AVAIL         | available for kernel-use                                       |
| Frame Address | 20 bits of the frame address in physical memory, 4-KiB aligned |

** Enable Paging

1. Copy the location (physical address) of your page directory into the CR3 register
2. Set the =PG= bit in the CR0 register

* Page faults

MMU will throw a page fault interrupt if the page is not cached in below cases or violate the protection rules
- access memory that is not mapped (page entry/table's present flag is not set)
- write to a read-only page in user-mode
- write to a kernel-only page in user-mode
- PTE is corrupted - the reversed bits have been overwritten

Page fault interrupt is number 14, there's an extra error code about what happened.

- Bit 0 :: If unset, the page wasn't present
- Bit 1 :: If set, the operation that caused the fault was a write
- Bit 2 :: If set, the processor was running in user-mode when it was interrupt
- Bit 3 :: If set, the fault was caused by reversed bits being overwritten
- Bit 4 :: If set, the fault occurred during an instruction fetch

CR2 register save the address that causes the fault.

* Code Analysis

Paging related code is placed in =kernel/core/mem.c=

** data structure

See =kernel/include/system.h= header file

#+BEGIN_SRC c
typedef struct page {
	uint32_t present:1;
	uint32_t rw:1;
	uint32_t user:1;
	uint32_t accessed:1;
	uint32_t dirty:1;
	uint32_t unused:7;
	uint32_t frame:20;
} page_t;

typedef struct page_table {
	page_t pages[1024];
} page_table_t;

typedef struct page_directory {
	page_table_t *tables[1024];	/* 1024 pointers to page tables... */
	uintptr_t physical_tables[1024];	/* Physical addresses of the tables */
	uintptr_t physical_address;	/* The physical address of physical_tables */
} page_directory_t;

page_directory_t *kernel_directory;
page_directory_t *current_directory;
#+END_SRC

MMU always access physical address (both page directory and page
tables). But OS can only read or write the page table by virtual
address if paging is enable.

=physical_address= is used when we clone the page directories. Because
after the paging is enabled, the new page directory will have an
address in virtual memory that is not the same as physical memory. We
must feed CR3 with the physical address of the page directory.

=page_directory.tables= save the virtual address for OS so that we can
read/write to them, and the =.physical_tables= array is the real page
directory feed to CPU.

** kmalloc before enable paging

Kernel heap is placed in virtual memory. Before the heap is active we
need a simple alternative to allocate memory.

Use the flat physical address and the memory allocated by =kmalloc_real=
will never need to be "free".

=uintrptr_t placement_pointer= point to the current available heap
address and will increase when ask for some more memory.

Page table and page directory must be page-aligned (4KB, 0x1000)



#+BEGIN_SRC c
extern uintptr_t end;
uintptr_t placement_pointer = (uintptr_t)&end;

void
kmalloc_startat(
		uintptr_t address
		) {
	placement_pointer = address;
}

/*
 * kmalloc() is the kernel's dumb placement allocator
 */
uintptr_t
kmalloc_real(
		size_t size,
		int align,
		uintptr_t * phys
		) {
	if (align && (placement_pointer & 0xFFFFF000)) {
		placement_pointer &= 0xFFFFF000;
	}
	if (phys) {
		*phys = placement_pointer;
	}
	uintptr_t address = placement_pointer;
	placement_pointer += size;
	return address;
}
#+END_SRC

*** TODO where is the "end" variable defined

** kmalloc wrapper

#+BEGIN_SRC c
/*
 * Normal
 */
uintptr_t
kmalloc(
		size_t size
		) {
	return kmalloc_real(size, 0, NULL);
}
/*
 * Aligned
 */
uintptr_t
kvmalloc(
		size_t size
		) {
	return kmalloc_real(size, 1, NULL);
}
/*
 * With a physical address
 */
uintptr_t
kmalloc_p(
		size_t size,
		uintptr_t *phys
		) {
	return kmalloc_real(size, 0, phys);
}
/*
 * Aligned, with a physical address
 */
uintptr_t
kvmalloc_p(
		size_t size,
		uintptr_t *phys
		) {
	return kmalloc_real(size, 1, phys);
}
#+END_SRC

According to James tutorial, the =kvmalloc_p= is used when we clone a
page directory because we will need the physical address at the same
time with virtual address.

** switch page directory

#+BEGIN_SRC c
void
switch_page_directory(
                page_directory_t * dir
                ) {
        current_directory = dir;
        __asm__ __volatile__ ("mov %0, %%cr3":: "r"(&dir->physical_tables));
        uint32_t cr0;
        __asm__ __volatile__ ("mov %%cr0, %0": "=r"(cr0));
        cr0 |= 0x80000000;
        __asm__ __volatile__ ("mov %0, %%cr0":: "r"(cr0));
}
#+END_SRC

Enable page directory by
- load CR3 with the address of the page directory (=dir->physical_tables=)
- set the PG bit (bit 31) of CR0 to enable paging
- (optional) set the PE bit (bit 1) of CR0 to enable protect mode

#+BEGIN_SRC asm
mov eax, physical_tables
mov cr3, eax

mov eax, cr0
or  eax, 0x8000_0000
mov cr0, eax
#+END_SRC

** allocate frames

#+BEGIN_SRC c
void
alloc_frame(
                page_t *page,
                int is_kernel,
                int is_writeable
                ) {
        if (page->frame) {
                return;
        } else {
                uint32_t index = first_frame();
                if (index == (uint32_t)-1) {
                        // never happens?
                        HALT_AND_CATCH_FIRE("Failed to allocate a frame: out of frames");
                }
                set_frame(index * 0x1000); 
                page->present = 1;
                page->rw      = (is_writeable) ? 1 : 0;
                page->user    = (is_kernel)    ? 0 : 1;
                page->frame   = index;
        }
}

void
free_frame(
                page_t *page
                ) {
        uint32_t frame;
        if (!(frame = page->frame)) {
                return;
        } else {
                clear_frame(frame);
                page->frame = 0x0;
        }
}
#+END_SRC


Page caches physical frame in =page->frame= pointer.

Allocate a frame for a page in below steps
1. find the first unused frame
2. make sure the frame not over $4GiB / 4KiB$ (the code =uint32_t - 1= would never happened?)
3. mark this frame 
   + is been used (whose address is =index * 0x1000=)
   + is present
   + read/write flag
   + kernel/user flag
4. mark its frame as the index (so the PA will be equal to VA?)

Free a frame is quiet easy: clear the bitmap and set the =frame= as zero.

** frame bitmap

#+BEGIN_SRC c
uint32_t *frames;
uint32_t nframes;

#define INDEX_FROM_BIT(b) (b / 0x20)
#define OFFSET_FROM_BIT(b) (b % 0x20)

static void
set_frame(
                uintptr_t frame_addr
                ) {
        uint32_t frame  = frame_addr / 0x1000;
        uint32_t index  = INDEX_FROM_BIT(frame);
        uint32_t offset = OFFSET_FROM_BIT(frame);
        frames[index] |= (0x1 << offset);
}

static void
clear_frame(
                uintptr_t frame_addr
                ) {
        uint32_t frame  = frame_addr / 0x1000;
        uint32_t index  = INDEX_FROM_BIT(frame);
        uint32_t offset = OFFSET_FROM_BIT(frame);
        frames[index] &= ~(0x1 << offset);
}

static uint32_t
test_frame(
                uintptr_t frame_addr
                ) {
        uint32_t frame  = frame_addr / 0x1000;
        uint32_t index  = INDEX_FROM_BIT(frame);
        uint32_t offset = OFFSET_FROM_BIT(frame);
        return (frames[index] & (0x1 << offset));
}

static uint32_t first_frame() {
        uint32_t i, j;
        for (i = 0; i < INDEX_FROM_BIT(nframes); ++i) {
                if (frames[i] != 0xFFFFFFFF) {
                        for (j = 0; j < 32; ++j) {
                                uint32_t test_frame = 0x1 << j;
                                if (!(frames[i] & test_frame)) {
                                        return i * 0x20 + j;
                                }
                        }
                }
        }       
        return -1;
}
#+END_SRC

Frame is a 4 KiB continuous addressed block.

| variable  | description                                                                   |
|-----------+-------------------------------------------------------------------------------|
| =nframes= | the count of frames                                                           |
| =frames=  | a bitmap consist by multiple 32-bit bytes to represent if the frame is cached |


| expression            | description                                                    |
|-----------------------+----------------------------------------------------------------|
| =frame_addr / 0x1000= | equals to the frame bitmap index                               |
| =INDEX_FROM_BIT()=    | macro to calculate the bitmap byte index                       |
| =OFFSET_FROM_BIT()=   | macro to calculate the bitmap bit offset                       |
| =set_frame(addr)=     | set the bitmap bit                                             |
| =clear_frame(addr)=   | clear the bitmap bit                                           |
| =test_frame(addr)=    | check the bitmap to see if the frame is used                   |
| =first_frame()=       | loops over the bitmap and finds the first uncached frame index |

* Reference

- https://wiki.osdev.org/Page_directory#Page_Directory
- https://wiki.osdev.org/MMU
- https://wiki.osdev.org/Higher_Half_Kernel
- http://www.jamesmolloy.co.uk/tutorial_html/6.-Paging.html



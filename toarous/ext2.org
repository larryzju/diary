* Overview

Ext2 filesystem is the concrete implement of filesystem. 

ToaruOs (0da56e6e516b61704dcce834b9afb1e3192371f2) has two header:
1. fs.h: abstract file system interface, such as =inode=, =read=, =write=
2. ext2.h: ext2 file system

Read initrd ramdisk as a ext2 filesystem, load the root directory inode information and convert it to =fs_node_t=

** Block

Basic storage block of contiguous space whose size is set in superblock.

** Inode

Metadata that points to the block of file, directory, symbolic link data.

*** Size not fixed?

** Block Group

Disk partitions.

1. bitmap of free/allocated blocks within the group
2. bitmap of allocated inodes within the group
3. a table of inode structures that belong to the group

* Layout

* Format

** Superblock

*** Location

Located at byte 1024 from the beginning of the volume and is exactly 1024 bytes in length.

#+BEGIN_SRC c
        initrd_start = (void *)mem_head;
        initrd_superblock = (ext2_superblock_t *)((uintptr_t)initrd_start + 1024);
        assert(initrd_superblock->magic == EXT2_SUPER_MAGIC);
#+END_SRC

*** Informations

- layout of the file system
- optional features...


** Block Group Descriptor Table

32bit sized Index Table with descriptor for each block group. Located in the block immediately following the Superblock. (1024 + 1024)

#+BEGIN_SRC c
struct ext2_bgdescriptor {
        uint32_t block_bitmap;
        uint32_t inode_bitmap;
        uint32_t inode_table;
        uint16_t free_blocks_count;
        uint16_t free_inodes_count;
        uint16_t used_dirs_count;
        uint16_t pad;
        uint8_t reserved[12];
} __attribute__ ((packed));
#+END_SRC



** Inodes

*** Index

Have a fixed size in =superblock.inode_size= and addresses start at 1.

#+BEGIN_SRC 
ext2_inodetable_t * 
ext2_get_inode(
                uint32_t inode
                ) {
        return (ext2_inodetable_t *)((uintptr_t)initrd_inode_table + initrd_superblock->inode_size * (inode - 1));
}
#+END_SRC

*** Root Inode

The second inode is specify for root directory.

#+BEGIN_SRC c
ext2_inodetable_t * root_inode = ext2_get_inode(2);
#+END_SRC


*** Attributes

- uid
- gid
- size
- mask/mode
- node type: link, reg, blk, dir, char, fifo,...


*** Methods

- open
- close
- read
- write
- readdir
- finddir


*** Blocks

The blocks of an inode are not contiguous. 

And inode has
1. 12 direct pointers
2. 1 singly indirect pointer
3. 1 doubly indirect block pointer
4. 1 triply indirect pointer

If a file needs more than 12 blocks, a separate block is allocated to store the block addresses of the remaining data blocks needed to store it contents.

See the wikipage image [[https://en.wikipedia.org/wiki/File:Ext2-inode.gif]]

#+BEGIN_SRC c
void *  
ext2_get_inode_block( 
                ext2_inodetable_t * inode,
                uint32_t block
                ) {
        if (block < 12) {
                return ext2_get_block(inode->block[block]);
        } else if (block < 12 + (1024 << initrd_superblock->log_block_size) / sizeof(uint32_t)) {
                return ext2_get_block(*(uint32_t*)((uintptr_t)ext2_get_block(inode->block[12]) + (block - 12) * sizeof(uint32_t)));
        }
        return NULL;
}
#+END_SRC

*** Directory

Inode's blocks contains =ext2_dir= structure array (whose size is equal to 8 + name length)

#+BEGIN_SRC c
struct ext2_dir {
        uint32_t inode;
        uint16_t rec_len;
        uint8_t name_len;
        uint8_t file_type;
        char name;              /* Actually a set of characters, at most 255 bytes */
} __attribute__ ((packed));
#+END_SRC


**** Get the nth child

#+BEGIN_SRC c
ext2_dir_t *
ext2_get_direntry(
                ext2_inodetable_t * inode,
                uint32_t index
                ) {
        void * block;
        block = (void *)ext2_get_inode_block(inode,0);
        uint32_t dir_offset;
        dir_offset = 0;
        uint32_t dir_index;
        dir_index = 0;
        while (dir_offset < inode->size) {
                ext2_dir_t * d_ent = (ext2_dir_t *)((uintptr_t)block + dir_offset);
                if (dir_index == index) {
                        return d_ent;
                }
                dir_offset += d_ent->rec_len;
                dir_index++;
        }
        return NULL;
}
#+END_SRC

** Block

*** Size

=1024 << superblock.log_block_size=


* Reference

- [[https://wiki.osdev.org/Ext2#Inodes][osdev Ext2]]
- https://github.com/klange/toaruos/blob/0da56e6e516b61704dcce834b9afb1e3192371f2/kernel/core/fs/ext2_initrd.c

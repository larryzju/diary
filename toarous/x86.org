#+TITLE: intel 80x86 笔记
#+AUTHOR: 赵文彬

* 寄存器

8 个 32-bit 通用寄存器，部分名称已经失去了历史命名时的意义

| register | description   |
|----------+---------------|
| EAX      | 累加          |
| EBX      |               |
| ECX      | counter       |
| EDX      |               |
| ESP      | stack pointer |
| EBP      | base pointer  |

其中 EAX, EBX, ECX, EDX 的低 16 位，以及低 16 位的高低 8 位可以单独使用（如 AX, AH, AL)

* 数据类型

计算机能做的全部工作可以归结为对数据的存储、检查和处理。内存是有唯一地址的字节的有序阵列。

** 静态数值 

用 =.DATA= 来指令开始，用 =DB=, =DW=, =DD= 来声明，如

#+BEGIN_SRC 
.DATA
var  DB 64
var2 DB ? ; 未初始化
     DB 10
X    DW ?
Y    DD 30000
str  DB 'hello', 0
arr  DD 100 DUP(0)  ; 100 个四字节数组，初始值为 0
#+END_SRC

** 寻址

间接寻址 =mov eax, [ebx]= , 地址可以进行偏移，如 =mov edx, [esi+4*ebx]= ，最多可以有两个寄存器参与计算

** size directive

通常汇编器会根据寄存器和操作数推断出实际的指定位数，有些情况需要手动显式地指定

#+BEGIN_SRC asm
  mov BYTE PTR [ebx], 2  		; single byte
  mov WORD PTR [ebx], 2		; 16-bit integer
  mov DWORD PTR [ebx], 2		; 32-bit integer
#+END_SRC

** 大端与小端问题
   :PROPERTIES:
   :CUSTOM_ID: 大端与小端问题
   :END:

数据的最低有效字节放在相邻字节的地址最低位称为 *小端*，反之称为 *大端*

80386 采用折是小端序（也称为低址结尾）

#+BEGIN_QUOTE
  MSB（最高有效位），LSB（最低有效位）
#+END_QUOTE

** 符号的表示
   :PROPERTIES:
   :CUSTOM_ID: 符号的表示
   :END:

表示带符号整数的方法有以下四种：

. 偏移值（Biased Numbers） . 带符号的值（Sign Magnitude） .
二进制反码（One's Complement） . 二进制补码（Tow's Complement）

8086
系列统一使用二进制补码，二进制补码易于实现，通过用于无符号数的简单加法器就能实现负数到二进制被码的转换。

** 浮点数处理
   :PROPERTIES:
   :CUSTOM_ID: 浮点数处理
   :END:

#+BEGIN_QUOTE
  80387 是 80386 的协处理器
#+END_QUOTE

在计算机里，用来表示数的位数是有限的，所以计算机不能精确地表示出所有的实数。而只能表示无穷个实数中的一个极小的子集。然而，就是这个子集，已经可以解决极大多数的实际问题，而且丢掉的精度也是微不足道的。所谓“浮点数”，就是实数类型数据的计算机表示法。

#+BEGIN_QUOTE
  *** 实数与浮点数
      :PROPERTIES:
      :CUSTOM_ID: 实数与浮点数
      :END:

  “实数”描写一个数的集合的数学术语；而“浮点”则是计算机用来表示实数的一个子集的数据类型

  与浮点数相对的是“定点数”，约定好后N位为小数，这种方式表示数的范围是固定的（小数的步长是一定的）。浮点数因为二进制小数点可以浮动，因而得名
#+END_QUOTE

浮点数实际上是靠两个整数来表示的，一个保持数据的有效数字，一个规定了二进制小数点的位置。但纯软件实现浮点数运算，其速度慢得无法忍受，所以通过
80387 协处理器来提供浮点运算硬件支持

#+BEGIN_QUOTE
  IEEE 浮点标准
#+END_QUOTE

80387 也支持整数数据类型，因此混合整数和浮点数运算，而以只在 80387
完成，省掉了 80387 和 80386 之间的数据传送

80387 支持三类实数格式:

| 数据类型     | 总位数   | 符号位   | 指数字段   | 有效数字段   |
|--------------+----------+----------+------------+--------------|
| 短实型数     | 32       | 1        | 8          | 23           |
| 长实型数     | 62       | 1        | 11         | 52           |
| 临时实型数   | 80       | 1        | 15         | 64           |

有效数字也被称为 *尾数*，80387 约定：任何实型数只能用下面的格式来表示:（
在二进制小数的左边，有且仅有一位，而且该位永远为 1，“1” 在记录中被省略）

#+BEGIN_EXAMPLE
    1.xxxxx x 2^n
#+END_EXAMPLE

指数字段是用偏移法来表示带符号的整数，较反码或补码，比较大小比较直观

除了正常数（Normals）以外，还存在有：

-  Zero
-  Denormals（微小数）
-  Pseudo Denormals（伪微小数）
-  Infinities
-  SignalingNan（信号的非数字）
-  Quiet Nan(静的非数字）


* 可执行文件

** section

-  Text/Code
-  Data
-  BSS(Block Started Symbol)，用于保存未初始化的全局变量，用于节省存储空间

** 文件格式

-  ELF ( Executable and Linker Format )
-  a.out: 传统的 unix 文件格式
-  COFF( Common Object File Format ) 和 PE( Portable Executable )

* ELF 文件格式

ELF 是 linux 默认格式，PE 是 Windows 默认格式。

1. 可以有任意多个 section
2. 每个 section 可以有自己的特征
3. 有利于 dynamic link
4. 有利于 debug

使用 =readelf --header <file>= 或 =objdump --disassemble=
命令来查看文件的 ELF 相关信息。

ELF 文件格式可以参考 =/usr/include/elf.h=，文件以 =Ehdr=
头信息开始，保存了 ELF 硬件类型和版本信息

#+BEGIN_EXAMPLE
    ELF Header:
      Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
      Class:                             ELF64
      Data:                              2's complement, little endian
      Version:                           1 (current)
      OS/ABI:                            UNIX - System V
      ABI Version:                       0
      Type:                              EXEC (Executable file)
      Machine:                           Advanced Micro Devices X86-64
      Version:                           0x1
      Entry point address:               0x404030
      Start of program headers:          64 (bytes into file)
      Start of section headers:          124688 (bytes into file)
      Flags:                             0x0
      Size of this header:               64 (bytes)
      Size of program headers:           56 (bytes)
      Number of program headers:         9
      Size of section headers:           64 (bytes)
      Number of section headers:         28
      Section header string table index: 27
#+END_EXAMPLE

#+BEGIN_QUOTE
  Magic 为魔数值，=0x7f= + =ELF= 标识这种文件类型
#+END_QUOTE

* 机器状态和存储器寻址

机器指令直接对基本的数据类型进行操作。每条机器指令指定了要执行的操作，以及参与操作的输入或输出的数据的位置。输入或输出的数据叫做操作数。

操作数可以在寄存器中，或者在处理器外的主存储器中，或者在I/O存储器中，或者在指令中作为程序立即常数的数据。

** 寄存器
   :PROPERTIES:
   :CUSTOM_ID: 寄存器
   :END:

应用程序可用的寄存器组由 16 个寄存器组成，分为三类：

. 用于算术和逻辑运算的 8 个 32
位通用寄存器，也可用于基址和变址寻址时存放地址 . 两个处理器控制寄存器 .
6 个 16 位的段寄存器，用来寻址存储器的段

#+BEGIN_QUOTE
  386 寄存器的名字是由老的 16 位寄存器的名字之前冠以 =E=组成
#+END_QUOTE

*** 通用寄存器
    :PROPERTIES:
    :CUSTOM_ID: 通用寄存器
    :END:

8 个 32 位通用寄存器，分别是 =EAX=, =ECX=, =EDX=, =EBX=, =ESP=, =EBP=,
=ESI= 和 =EDI=。

通用寄存器的低 16 位可以作为 16 位的寄存器独立访问。并将之命名为 =AX=,
=CX=,=DX=, =BX=, =SP=, =BP=, =SI=, =DI=

=AX=, =BX=, =CX=, =DX= 的高半和低半个寄存器可以作为 8
位的寄存器来独立访问，后缀以 =H= 和 =L= 表示，如 =AL=, =BH=

通用寄存器在作为操作数地址存储，或在形成地址的过程中进行加减操作等简单自述运算时是运用的。但像串的运算和双精度的乘法和除法操作这类较复杂的操作，必须要从固定的寄存器中取一个或多个操作数。指令需要从专门的寄存器中读取一个或更多的操作数的技术称为
*特征* 。80386 用它来支持复杂的操作，这种复杂的操作要求 80386
指令格式中提供的两个以上的操作数。

*** 处理器控制寄存器
    :PROPERTIES:
    :CUSTOM_ID: 处理器控制寄存器
    :END:

两个寄存器控制 80386 的工作：

. 指令指针寄存器 =EIP= . 处理器状态和控制标志寄存器 =EFLAGS=

=EIP= 指向处理器将要执行的下一条指令。（16 位的 =IP= 寄存器包含在 =EIP=
的低 16 位）

32 位的 =EFLAGS=
寄存器包含有若干个状态标志和控制标志位。程序可置位控制标志位以控制 80386
的某些功能的运行。自述操作之后处理器自己置位适当的状态位，程序测试这些状态位，以检测特定的条件。其中

-  算术状态标志： =CF=, =PF=, =AF=, =ZF=, =SF= 和 =OF=
   由自述和逻辑指令置位
-  =CF= 进位标志，无符号算术运算溢出条件，支持多精度算术运算
-  =PF= 奇偶标志位，低 8 位的奇偶性，低 8 位 1 的个数为偶数时置位
-  =AF= 辅助进位位，如果位 3 向前有一个进位或借位，AF 被置为 1,用于 BCD
   算术
-  =ZF= 零标志，结果为零时置位
-  =SF= 符号标志，置成结果的最高有效位
-  =OF= 2 的补码溢出标志
-  处理器控制标志: =TF=, =IF=, =DF=, =IOPL=, =NT=, =RF=, =VM=
-  =TF= 置位后在每条指令执行结束处将发生单步中断
-  =IF= 置位后允许外部中断
-  =DF= 方向标志决定串操作指令在每步之后其变址寄存器是后加（DF=0）或后减
-  =IOPL= 指定了要求执行IO指令的特权级（保护模式），两位宽
-  =NT= 嵌套任务控制 =IRET= 指令的运行，如果 NT =
   0，则用栈中保存的值恢复 =EFLAGS=、=CS= 和 =EIP=
   执行常规的从中断返回的动作。如果 NT =
   1，中断返回胜任务转换代替上述过程
-  =RF= 重启动标志控制着调试故障是接受（RF=0），或者是被忽略(RF=1)
-  =VM= 虚拟 8086 方式位

#+BEGIN_QUOTE
  运行在任何特权级下的程序都可以置位或清除 =RF=, =NT=, =DF= 和 =TF=
  这些标志位，只有在特权级 0 下执行的程序才能改变 =VM= 及 =IOPL= 字段。
  =IF= 位只能由具有 I/O 特权的程序所改变
#+END_QUOTE

*** 段寄存器
    :PROPERTIES:
    :CUSTOM_ID: 段寄存器
    :END:

6 个 16 位的寻址内存的段的段寄存器,分别定名为 =ES=, =CS=, =SS=, =DS=,
=FS= 和 =GS=，其中 =FS= 和 =GS= 是 386 上新增加的段寄存器

** 寻址的概念
   :PROPERTIES:
   :CUSTOM_ID: 寻址的概念
   :END:

段寄存器寻址把存储器空间分成一个或多个叫做段的线性区域。一个存储器的地址由两个部分组成：一是段的部分，标识所容纳的段；另一个是偏移部分，指出了在该段内的以字节计的偏移量。

关键的问题是：
*如何把诸如代码的过程、数据区和程序的堆栈等的程序单元安排在一个或多个段中*

段的部分是一个 16 位的段选择子，段选择子有一个 14 位的字段，用于识别
16384 种可能的段。32
位的地址偏移部分给出了一个字节在所在段中的偏移。一个段的最大长度为 4G

** 内存寻址机制

大多数的程序倾向于同时只使用不多的几个段，在这些有限的段中产生许多不同的偏移地址。

*** 段选择
    :PROPERTIES:
    :CUSTOM_ID: 段选择
    :END:

每个存储器的引用或是隐含地或是显示地或是默认地指定了段寄存器。段寄存器中包含有地址的段的部分的选择子。有以下约定：

-  代码段的引用总是用 CS 段寄存器
-  堆栈段的引用总是用 SS 段寄存器
-  某些字串处理指令总是用 ES 段寄存器作为目标操作数的段寄存器

由 CS 寄存器在任何给定的时间上寻址的段叫做当前代码段。EIP 寄存器包含了由
CS
寄存器寻址的段中下一次要执行的指令的偏移地址，因此下一条要执行的指令的地址是
=CS:[EIP]=。所有代码段的引用使用 CS
寄存器，因此在任何时候只有一个代码段是可以寻址的。

由 SS 寻址的段叫做当前堆栈段，如 PUSH, POP, CALL 和 RETURN
这些堆栈操作，使用由 SS
寻址的段内的一个程序的堆栈。该堆栈的顶是由包含在通用寄存器 ESP
中的偏移地址所指向。 ESP 是专门为这种用途而保留的，程序堆栈的顶的地址是
=SS:[ESP]=

#+BEGIN_QUOTE
  堆栈的内存是由 ESP 向地址低的方向移动分配的，因此 ESP
  之上的段的部分已经分配给堆栈，而低于 ESP
  部分的内存对于以后需要分配时是可用空间。
#+END_QUOTE

*** 偏移部分
    :PROPERTIES:
    :CUSTOM_ID: 偏移部分
    :END:

引用一个存储器操作数的每条指令规定了计算偏移量的方法，这种规定法叫做指令的寻址方式。

80386 上的寻址方式规定将其相加构成偏移的成分多达三个：

. 一个基地址寄存器 . 一个比例因子为 1,2,4,8 的变址寄存器 .
一个常数位移量

8 个通用寄存器中的任意一个可以用作基地址寄存器，除了 SS 之外的 7
个能作为变址寄存器，或者变址成分可以被忽略。

#+BEGIN_EXAMPLE
    基地址 + (变址 X 比例因子) + 位移量
#+END_EXAMPLE

#+BEGIN_QUOTE
  如果存储器操作数是对齐的，寻址时比较快（C 中结构体内存对齐的原因）
#+END_QUOTE

对于数据引用，其默认的段寄存器取决于所选择的基地址寄存器。如果基地址寄存器是
ESP 或者 EBP，则默认的段寄存器从通常的 DS 改为 SS。
* Interrupt & Exception

** Overview

Both are special kinds of control transfer like unprogrammed =CALLs=
which alter the normal program flow to handle external events or to
report errors or exceptional conditions.

The difference betwwen the interrupt and exception is that
- Interrupt is used to handle asynchronous events external to the process
- Exceptions is used to handle events of executing instruction 

** Interrupt

*** Type

1. Maskable interrupt: signalled via the =INTR= pin
2. Non-Maskable interrupt: signalled via the =NMI= pin

** Exception

*** Type

1. Processor detected: faults, traps, aborts
2. Programmed: =INTO=, =int 3=, =int n= and =bound= (software interrupts)

*** fault, trp and abort

- the way they are reported
- whether restart of the instruction
  + fault: reported "before" the instruction causing the exception
  + trap: reported at the instruction boundary immediately after the instruction
  + abort: don't know percise location and don't restart the program

** Identity

*** Princple

- =ID [0-32)= is used to represent NMI and exception
- =ID [32-256)= is used for Maskable interrupt (via Intel's 8259A PIC chip)

*** Detail

| id | description                             |
|----+-----------------------------------------|
|  0 | Divide error                            |
|  1 | Debug exceptions                        |
|  2 | Nonmaskable interrupt                   |
|  3 | Breakpoint (one-byte INT 3 instruction) |
|  4 | Overflow (INTO instruction)             |
|  5 | Bounds check (BOUND instruction)        |
|  6 | Invalid opcode                          |
|  7 | Coprocessor not available               |
|  8 | Double fault                            |
|  9 | (reserved)                              |
| 10 | Invalid TSS                             |
| 11 | Segment not present                     |
| 12 | Stack exception                         |
| 13 | General protection                      |
| 14 | Page fault                              |
| 15 | (reserved)                              |
| 16 | Coprecessor error                       |

** Enable/Disable

*** NMI Masks Further NMIs

Only one NMI handler is executing at the same time (until the next =IRET=)

*** IF Masks INTR

When IF (interrupt-enable flag) = 0, =INTR= interrupts are inhibited.

Use =CLI= and =STI= instruction to alter the setting of IF.

*** RF Masks Debug Faults

RF bit in EFLAGS controls the recongnition of debug faults.

*** MOV or POP to SS Masks Some Interrupts and Exception

#+BEGIN_SRC 
MOV SS, AX
MOV ESP, StackTop
#+END_SRC

Protect no interrupt handler called before the ESP being set.

** TODO Priority

1. High priority handler first
2. lower priority exceptions are discarded
3. lower priority interrupts are held pending

*** Details

| Priority | Class of Interrupt or Exception      |
|----------+--------------------------------------|
| HIGHEST  | Faults except debug faults           |
|          | Trap instructions INTO, INT n, INT 3 |
|          | Debug traps for this instruction     |
|          | Debug faults for next instruction    |
|          | NMI interrupt                        |
| LOWEST   | INTR interrupt                       |

** IDT

Interrupt Descriptor Table (IDT) associates identifier with a descriptor (for handler).
- IDT is an array of 8-byte descrpitors
- may reside anywhere in physical memory
- Located by IDTR (IDT register)
- Use =LIDT= and =SIDT= operate on the IDTR (with 6 byte operand: base address and limit values)

*** Illustration

#+BEGIN_EXAMPLE
                                              INTERRUPT DESCRIPTOR TABLE
                                              +------+-----+-----+------+
                                        +---->|      |     |     |      |
                                        |     |- GATE FOR INTERRUPT #N -|
                                        |     |      |     |     |      |
                                        |     +------+-----+-----+------+
                                        |     *                         *
                                        |     *                         *
                                        |     *                         *
                                        |     +------+-----+-----+------+
                                        |     |      |     |     |      |
                                        |     |- GATE FOR INTERRUPT #2 -|
                                        |     |      |     |     |      |
                                        |     |------+-----+-----+------|
            IDT REGISTER                |     |      |     |     |      |
                                        |     |- GATE FOR INTERRUPT #1 -|
                    15            0     |     |      |     |     |      |
                   +---------------+    |     |------+-----+-----+------|
                   |   IDT LIMIT   |----+     |      |     |     |      |
  +----------------+---------------|          |- GATE FOR INTERRUPT #0 -|
  |            IDT BASE            |--------->|      |     |     |      |
  +--------------------------------+          +------+-----+-----+------+
   31                             0
#+END_EXAMPLE

*** Descriptors

**** Kinds

- Task gates :: task switch in a manner similar to a =CALL=
- Interrupt gates :: normal handler
- Trap gates :: invokes the handler in a manner similar to a =CALL= to a call gate

**** Illustration

#+BEGIN_EXAMPLE
                                80386 TASK GATE
   31                23                15                7                0
  +-----------------+-----------------+---+---+---------+-----------------+
  |#############(NOT USED)############| P |DPL|0 0 1 0 1|###(NOT USED)####|4
  |-----------------------------------+---+---+---------+-----------------|
  |             SELECTOR              |#############(NOT USED)############|0
  +-----------------+-----------------+-----------------+-----------------+

                                80386 INTERRUPT GATE
   31                23                15                7                0
  +-----------------+-----------------+---+---+---------+-----+-----------+
  |           OFFSET 31..16           | P |DPL|0 1 1 1 0|0 0 0|(NOT USED) |4
  |-----------------------------------+---+---+---------+-----+-----------|
  |             SELECTOR              |           OFFSET 15..0            |0
  +-----------------+-----------------+-----------------+-----------------+

                                80386 TRAP GATE
   31                23                15                7                0
  +-----------------+-----------------+---+---+---------+-----+-----------+
  |          OFFSET 31..16            | P |DPL|0 1 1 1 1|0 0 0|(NOT USED) |4
  |-----------------------------------+---+---+---------+-----+-----------|
  |             SELECTOR              |           OFFSET 15..0            |0
  +-----------------+-----------------+-----------------+-----------------+
#+END_EXAMPLE

** Interrupt Tasks and Interrupt Procedures

*** TODO Difference between task and procedure?

- Procedure execute in the context of the currently executing task
  + selector points to an executable-segment descriptor in either the GDT or the current LDT
  + offset points to the relative address of handler procedure

*** Interrupt Procedures

- for interrupt gate or trap gate only
- pushes the =FLAGS= register onto the stack before the pointer to the interrupted instruction
- =IRET= is used to exit from an interrupt procedure which is similar to =RET= except
  + increments EIP by an extra four bytes (for the EFLAG flag on the stack)
  + move the saved flags into the EFLAGS register
- Both reset TF (trap flag)
- Interrupt also resets IF (interrupt-enable flag) but trap gate does not change IF.



#+BEGIN_EXAMPLE
                  IDT                                    EXECUTABLE SEGMENT
           +---------------+                             +---------------+
           |               |                       OFFSET|               |
           |---------------|  +------------------------->| ENTRY POINT   |
           |               |  |      LDT OR GDT          |               |
           |---------------|  |   +---------------+      |               |
           |               |  |   |               |      |               |
INTERRUPT  |---------------|  |   |---------------|      |               |
   ID----->| TRAP GATE OR  |--+   |               |      |               |
           |INTERRUPT GATE |--+   |---------------|      |               |
           |---------------|  |   |               |      |               |
           |               |  |   |---------------|      |               |
           |---------------|  +-->|   SEGMENT     |-+    |               |
           |               |      |  DESCRIPTOR   | |    |               |
           |---------------|      |---------------| |    |               |
           |               |      |               | |    |               |
           |---------------|      |---------------| |    |               |
           |               |      |               | |BASE|               |
           +---------------+      |---------------| +--->+---------------+
                                  |               |
                                  |               |
                                  |               |
                                  +---------------+
#+END_EXAMPLE


*** Interrupt Tasks
- task gate only
- selector points to a =TSS= descriptor int the GDT
- two advantages
  1. the entire context is saved automatically
  2. the interrupt handler can be isolated from other tasks by giving it a separate address space, either via its LDT or vira its page directory

**** Illustration

#+BEGIN_EXAMPLE
            IDT                       GDT
     +----------------+        +----------------+
     |                |        |                |              TSS
     |----------------|        |----------------|       +----------------+
     |                |        |                |       |                |
     |----------------|        |----------------|       |                |
     |                |        |                |       |                |
     |----------------|        |----------------|       |                |
 +-->|   TASK GATE    |---+    |                |       |                |
 |   |----------------|   |    |----------------|       |                |
 |   |                |   +--->| TSS DESCRIPTOR |---+   |                |
 |   |----------------|        |----------------|   |   |                |
 |   |                |        |                |   |   |                |
 |   |----------------|        |----------------|   +-->+----------------+
 |   |                |        |                |
 |   |----------------|        |----------------|
 |   |                |        |                |
 |   +----------------+        +----------------+
 |
 +-INTERRUPT ID
#+END_EXAMPLE

** Error Code

Parameter to some handler that will be pushed onto the stakc of the exception handler

*** Format

#+BEGIN_EXAMPLE
       31              15                                         2 1 0
      +---------------+----------------+-----------------+-------+-+-+-+
      |################################|                         |T| |E|
      |###########UNDEFINED############|     SELECTOR INDEX      | |I| |
      |################################|                         |I| |X|
      +---------------+----------------+-----------------+-------+-+-+-+
#+END_EXAMPLE

1. =EXT= flag to mark the external source
2. if =I= | =TI=, then use IDT, else use GDT

* instruction

分为三大类

1. data movement
2. arithmetic/logic
3. control/flow

** Data Movement Instructions

*** mov

不能直接从内存移动到内存，需要通过寄存器中转

Syntax

- mov <reg>, <reg>
- mov <reg>, <mem>
- mov <mem>, <reg>
- mov <reg>, <const>
- mov <mem>, <const>

Examples,

#+BEGIN_SRC asm
  mov eax, ebx 			;copy the value in ebx into eax
  mov byte ptr [var], 5		;store the vaue 5 into the byte at location var
#+END_SRC



*** push

等效于 ~*(--esp) = val~ ,注意栈是向下增长的

Syntax

- push <reg32>
- push <mem>
- push <con32>

Examples

#+BEGIN_SRC asm
  push eax			; push eax on the stack
  push [var]			; push the 4 bytes at address var onto the stack
#+END_SRC


*** pop

等效于 ~val = *(sp++)~


*** lea

Load Effective Address，计算地址

#+BEGIN_SRC asm
  lea edi, [ebx + 4 * esi]	; EDI = EBX + 4 * ESI
  lea eax, [var]			; EAX = &var
  lea eax, [val]			; EAX = val
#+END_SRC


** Arithmetic and Logic Instructions

*** add

Syntax

- add <reg>, <reg>
- add <reg>, <mem>
- add <mem>, <reg>
- add <reg>, <con>
- add <mem>, <con>

Example

#+BEGIN_SRC asm
  add BYTE PTR[var], 10
#+END_SRC


*** sub

#+BEGIN_SRC asm
  sub al, ah
  sub eax, 216
#+END_SRC


*** inc, dec

#+BEGIN_SRC asm
  dec eax
  inc DWORD PTR [var]
#+END_SRC


*** imul

分为两个操作数和三个操作数两种格式

#+BEGIN_SRC asm
  imul eax, [var] 		; eax *= *var
  imul esi, edi, 25		; esi = edi * 25
#+END_SRC


*** idiv

被除数存放在 =EDX:EAX= 中（EDX 为高位），除数在指定中指定。商存放在 EAX，余数存放在 EDX

*** and, or, xor

位运算，使用方式同 =add=, =sub=


*** not

按位取反

*** neg

two's complement negation


*** shl, shr

移位符（c 中的 <<, >>）


** Control Flow Instructions

IP (instruction pointer) 寄存器指向当前执行的指令位置。通过控制指令来修改 IP 指向，实现跳转。

汇编源码中可以用 "label:" 来标识一个位置，可以被其它的指令来引用


*** jmp

jmp <label>，跳转到某个 label


*** jcondition sets

根据状态码（machine status word）不同进行不同的跳转操作

- je :: jump when equal
- jne :: jump when not equal
- jz :: jump when last result was zero
- jg :: jump when greater than
- jge :: jump when greater or equal to
- jl :: jump when less than
- jle :: jump when less than or equal to

Example:
#+BEGIN_SRC asm
  cmp eax, ebx
  jle done
#+END_SRC


*** cmp

类似于 =sub= ，但结果被丢弃，只影响 condition codes


*** call, ret

子程序调用。首先把当前下下文压栈，跳转到指定位置执行子程序，最后通过 =ret= 恢复上下文（从栈中），返回上一级继续执行

Syntax
#+BEGIN_SRC asm
  call <label>
  ret
#+END_SRC

* Calling Convention

call 和 ret 仅保证子方法能被调用，但没有规定参数传递等格式。高级语言的编译器使用了一套规范，例如 C 语言约定把参数通过 stack 来传递，把寄存器内容压栈，把本地变量也存放在栈上。

calling convention 主要包括两部分

1. 调用者规范 (caller)
2. 被调用者规范 (callee)

[[https://www.cs.virginia.edu/~evans/cs216/guides/stack-convention.png][stack during subroutine call]]


** caller rules

1. stage register of caller-saved, such as EAX, ECX, EDX
2. push parameters of function n inverted order (last parameter first)
3. =call= will stack the return address on top of the parameters on thestack


返回值将被置于 EAX 中，调用者首先弹出入参，再按栈信息来恢复上下文（寄存器的值）。

例如调用 =_myFunc(eax, 216, &var)=
#+BEGIN_SRC asm
  push [var]
  push 216
  push eax

  call _myFunc

  add esp, 12
#+END_SRC

** callee rules

1. copy the value of ESP into EBP to find the parameters and local variables on the stack. Before copy from ESP, the EBP should be stacked.
   #+BEGIN_SRC asm
     push ebp
     mov ebp, esp
   #+END_SRC

2. allocate local variables on the stack

3. save the callee-saved registers, such as EBX, EDI, ESI

返回时的步骤

1. leave the return value in EAX
2. restore EDI and ESI
3. deallocate local variables =mov esp, ebp=
4. restore EBP by popping ESP off the stack
5. return to the caller by executing a =ret= instruction


函数的参数和本地变量都可以通过 base pointer 相对寻址找出，其中

1. 参数在高地址（中间隔了一个 4 字节的 return address），第一个参数为 EBP+8，第二个参数在 EBP+12，依次类推
2. 本地变量在低地址，第一个本地变量在 EBP-4

** TODO 被调用者如何知道有几个参数？

* misc

** interrupt

IRET jump back from the interrupt handler.

** stack

PUSHF and POPF push/pop all flags into stack

* term 

** TODO CPL & IOPL
protection control

** TODO interrupt gate

* 参考资料
  :PROPERTIES:
  :CUSTOM_ID: 参考资料
  :END:

- [[http://www.bottomupcs.com/chapter07.xhtml][binary format]]
- [[http://www.logix.cz/michal/doc/i386/][Intel 80386 Programmer's Reference Manual (non-official)]]
- [[https://www.cs.virginia.edu/~evans/cs216/guides/x86.html][x86 Assembly Guide]]


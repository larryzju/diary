#+TITLE: Ansible
#+AUTHOR: Zhao Wenbin

* Overview 

** What is Ansible

- automation language (playbook yaml syntax)
- automation engine (=ansible-playbook=)
- Ansible Tower (UI and RESTFul API server)

** Ecosystem

- Red Hat Support
- Ansible Tower
- Ansible Galaxy (CPAN?)

** Feature

- Simple
- Powerful
- Agentless

** TODO Usage

- Config Management
- App deployment
- Provision?
- Continuous delivery?
- Security & Compliance?
- Orchestration?

** Architecture

- Inventory :: lists of hosts
- Playbook :: Describe the desired state of something. Contains *Plays* and *play* contains *Tasks*
- Tasks :: Task run sequentially and calls *Modules*
- Modules :: ?
- Variable :: ?
- Discovered variables (facts) :: ?
- Handlers :: Triggered by Tasks's *Notify*
- Roles :: kind of Playbook that is fully self-contained with task, variables, configurations templates

** How to use

1. ad-hoc command line: =ansible inventory -m=
2. =ansible-playbook= command line
3. Ansible Tower (UI)

** Notes

核心功能是： *登录到一组主机，执行一套命令*

- 主机组由 Inventory 定义，主机组配置灵活
- 执行的这组命令称为 Task List
- Task List 中的命令以一定的顺序执行
- 每个 Task 调用系统功能，称为 Module
- Module 以 Python 实现，最常见的如 shell 和 file 操作
- 远程机器的方式可以有 ssh 或 docker，在 module 上实现了操作的统一
- 无需在各 node 上部署客户端 (Agentless)
- 通过 Jinja2 语法提供模板替换

* Variable

See [[Inventory][Inventory]]

* Inventory

** Basic

- Default configure file is located at =/etc/ansible/hosts=
- Group hosts to *group* ( with the section name in =ini= file )
- Group variables can be defined at section =group_name:vars=
- Two default groups: =all= and =ungrouped=
- Coupled with variable definition
- Recommend to [[Splitting Out Host and Group Specific Data][split variable definition to seperated files]]

** Feature

- Jumper :: Alias for host ( =ansible_host= or =ansible_port= )
- Connection Type :: Set =ansible_connection= to =smart=, or =ssh=, or =paramiko=, or =docker=
- Range pattern :: Such as =www[01:50].example.com= 

** Splitting Out Host and Group Specific Data

- Split varaible definition to seperated files
- Files will be placed at =/etc/ansible/{group_vars, host_vars}/name/=
- Let group to manage the logical host sets
- Attach variable defintions to logical host set

** How Variables Are Merged

The order/precedence is (from lowest to highest):
1. all group
2. parent group
3. child group
4. host

Merge order can be changed by =ansible_group_priority= setting
* Playbook

** Basic

- Playbook defines lists of *plays*
- Play maps a group of *hosts* to some well defined *roles*, represented by things ansible calls *tasks*
- Task calls to an ansible *module*

** TODO Order of players (in Playbook)
** TODO Order of tasks (in Play)

** Notes

- 通过 yaml 语法进行配置
- =ansible-playbook= 最佳实践
  1. =--syntax-check= 检查语法
  2. =-C= 试运行 (dry-run)



** notify - handlers

- 'Notify' actions are triggered at the end of each block of tasks in a play, only be triggered only once
- 'Handlers' are lists of tasks that are referenced by a globally unique name
- Regardless of how many tasks notify a handler, the handler will run only once
- 'Handlers' can listen to spefic named notify (match with handler's name in classic way)

** tags

** TODO varibles

** TODO templates

** TODO condition/loop syntax

** TODO Playbook & Roles
* Role

** Overview

*** What is Role

Roles are ways of automatically loading certain vars_files, tasks, and handlers based on a known file structure.

*** Why Role?

For sharing roles with others (encapsulation)

*** Directory Structure

- Contains specific sets of directory
- Each directory contains a =main.yml= configuration file

** Directory Explain

- tasks :: contains the main list of tasks to be executed by the role.
- handlers :: contains handlers, which may be used by this role or even anywhere outside this role.
- defaults :: default variables for the role (see Variables for more information).
- vars :: other variables for the role (see [[Variable]] for more information).
- files :: contains files which can be deployed via this role.
- templates :: contains templates which can be deployed via this role.
- meta :: defines some meta data for this role. See below for more details.

** Tasks & Roles

- Task can import other tasks by =import_tasks= and =when= clause
- Task can import other roles by =include_role= or =import_role=
- Tasks are defined under the =role/task/main.yml=

** TODO Modules & Plugins Embed

** Usage

- Playbook choose the roles with =roles= keyword
- If the =roles/x/{tasks,handlers,vars,defaults,meta,script,copy,template}= directory exists, do something
- =meta= configured the behaviour of role

** Playbook executions order

1. Any =pre_tasks= defined in the play.
2. Any =handlers= triggered so far will be run.
3. Each role listed in =roles= will execute in turn. Any role dependencies defined in the roles =meta/main.yml= will be run first, subject to tag filtering and conditionals.
4. Any =tasks= defined in the play.
5. Any =handlers= triggered so far will be run.
6. Any =post_tasks= defined in the play.
7. Any =handlers= triggered so far will be run.

** Dependencies

- Role can depend other roles
- include them in =meta/main.yml=
- Execute before current role


** Search Path

1. =role= directory, relative to the playbook file
2. By default, in =/etc/ansible/roles=


** Misc

- Duplicated roles in playbook would be execute only once (if not be changed in meta)
- Default Values as the fallback of =vars=
- Roles in playbook can be tagged with =tags= command

* Modules

** group

** user

** copy

** file

- Change permission
- Create directory

** TODO fetch

** command

** TODO shell

** cron

** yum

** service

** TODO git
** TODO script

script at local?

** TODO async-status

* Misc

** Log types

1. with SSH Key
2. Ask for password =--ask-pass=
3. Switch to other user (=sudo=) with =--ask-become-pass=

** Disable host-key

Disable =host-key-checking= for
1. host information change in =know_hosts=
2. first time to login a ssh server

** =ansible all -m setup=

** background execute

- =-B 3600=: run in background for most 3600s
- =-P= for polling
** TODO ansible-doc
** TODO ansible-pull

#+TITLE: Ansible
#+AUTHOR: Zhao Wenbin

* Overview 

** What is Ansible

- automation language (playbook yaml syntax)
- automation engine (=ansible-playbook=)
- Ansible Tower (UI and RESTFul API server)

** Ecosystem

- Red Hat Support
- Ansible Tower
- Ansible Galaxy (CPAN?)

** Feature

- Simple
- Powerful
- Agentless

** TODO Usage

- Config Management
- App deployment
- Provision?
- Continuous delivery?
- Security & Compliance?
- Orchestration?

** Architecture

- Inventory :: lists of hosts
- Playbook :: Describe the desired state of something. Contains *Plays* and *play* contains *Tasks*
- Tasks :: Task run sequentially and calls *Modules*
- Modules :: ?
- Variable :: ?
- Discovered variables (facts) :: ?
- Handlers :: Triggered by Tasks's *Notify*
- Roles :: kind of Playbook that is fully self-contained with task, variables, configurations templates

** How to use

1. ad-hoc command line: =ansible inventory -m=
2. =ansible-playbook= command line
3. Ansible Tower (UI)

** Notes

核心功能是： *登录到一组主机，执行一套命令*

- 主机组由 Inventory 定义，主机组配置灵活
- 执行的这组命令称为 Task List
- Task List 中的命令以一定的顺序执行
- 每个 Task 调用系统功能，称为 Module
- Module 以 Python 实现，最常见的如 shell 和 file 操作
- 远程机器的方式可以有 ssh 或 docker，在 module 上实现了操作的统一
- 无需在各 node 上部署客户端 (Agentless)
- 通过 Jinja2 语法提供模板替换

* Variable

See [[Inventory][Inventory]]

- =register= :: ?

* Inventory

** Basic

- Default configure file is located at =/etc/ansible/hosts=
- Group hosts to *group* ( with the section name in =ini= file )
- Group variables can be defined at section =group_name:vars=
- Two default groups: =all= and =ungrouped=
- Coupled with variable definition
- Recommend to [[Splitting Out Host and Group Specific Data][split variable definition to seperated files]]

** Feature

- Jumper :: Alias for host ( =ansible_host= or =ansible_port= )
- Connection Type :: Set =ansible_connection= to =smart=, or =ssh=, or =paramiko=, or =docker=
- Range pattern :: Such as =www[01:50].example.com= 

** Splitting Out Host and Group Specific Data

- Split varaible definition to seperated files
- Files will be placed at =/etc/ansible/{group_vars, host_vars}/name/=
- Let group to manage the logical host sets
- Attach variable defintions to logical host set

** How Variables Are Merged

The order/precedence is (from lowest to highest):
1. all group
2. parent group
3. child group
4. host

Merge order can be changed by =ansible_group_priority= setting
* Playbook

** Basic

- Playbook defines lists of *plays*
- Play maps a group of *hosts* to some well defined *roles*, represented by things ansible calls *tasks*
- Task calls to an ansible *module*

** TODO Order of players (in Playbook)
** TODO Order of tasks (in Play)

** Notes

- 通过 yaml 语法进行配置
- =ansible-playbook= 最佳实践
  1. =--syntax-check= 检查语法
  2. =-C= 试运行 (dry-run)

** Blocks

*** What is block

Blocks allow for logical grouping of tasks and in play error handling

*** Example

#+BEGIN_SRC yaml
   tasks:
     - name: Install Apache
       block:                     # become, when, become_user will be applied to this block
         - yum:
             name: "{{ item }}"
             state: installed
           with_items:
             - httpd
             - memcached
         - template:
             src: templates/src.j2
             dest: /etc/foo.conf
         - service:
             name: bar
             state: started
             enabled: True
       when: ansible_distribution == 'CentOS'
       become: true
       become_user: root
#+END_SRC

*** Error Handling

#+BEGIN_SRC yaml
   tasks:
   - name: Attempt and graceful roll back demo
     block:
       - debug:
           msg: 'I execute normally'
       - command: /bin/false
       - debug:
           msg: 'I never execute, due to the above task failing'
     rescue:
       - debug:
           msg: 'I caught an error'
       - command: /bin/false
       - debug:
           msg: 'I also never execute :-('
     always:
       - debug:
           msg: "This always executes"
#+END_SRC

- Similar to python =try...except...finally= logical

*** Variable

- =ansible_failed_task= :: The task object that returned ‘failed’ and triggered the rescue
- =ansible_failed_result= :: The captured return result of the failed task that triggered the rescue

** notify - handlers

- 'Notify' actions are triggered at the end of each block of tasks in a play, only be triggered only once
- 'Handlers' are lists of tasks that are referenced by a globally unique name
- Regardless of how many tasks notify a handler, the handler will run only once
- 'Handlers' can listen to spefic named notify (match with handler's name in classic way)

** Tags

*** Usage

For =ansible-playbook= command line to filter with tags:
- =--tags=: match tags
- =--skip-tags=: skip tags

*** Scope

Can be applied to multiple levels:
1. task
2. play
3. role
4. import file

Note: Not works at =include_tasks=, for its dynamic include feature

*** Misc

- Use =--list-tags= in =ansible-playbook= command line to check all tags
- Special tags =always= and =never= can be used in mark 
- Can filter with special tags named =tagged=, =untagged=, =all=

** TODO varibles

** TODO templates

** Conditional

*** Why?

Often the result of a play may depend on
1. the value of variable
2. fact (something learned about the remote system)
3. previous task result

*** =when= statement

- without double curly braces
- can use parathese to group condition (with logical likes =or=)
- Multiple conditions as a list means logical =and=
- =register= result can be compared with ={failed,successed,skipped}=
- Boolean check
  #+BEGIN_SRC yaml
    vars:
      epic: true

  
    ## true
    tasks:
        - shell: echo "This certainly is epic!"
          when: epic
      
    ## or false:
    tasks:
        - shell: echo "This certainly isn't epic!"
          when: not epic
  #+END_SRC
- Defined check
  #+BEGIN_SRC yaml
    tasks:
        - shell: echo "I've got '{{ foo }}' and am not afraid to use it!"
          when: foo is defined

        - fail: msg="Bailing out. this play requires 'bar'"
          when: bar is undefined
  #+END_SRC

*** Loops and Conditionals

#+BEGIN_SRC yaml
tasks:
    - command: echo {{ item }}
      loop: [ 0, 2, 4, 6, 8, 10 ]
      when: item > 5
#+END_SRC

Withing =lookup= plugin's =dict= command

#+BEGIN_SRC yaml
vars:
  persons:
    Lily:
      sex: female
      age: 29
    Lucy:
      sex: female
      age: 29
    LiLei:
      sex: male
      age: 30

tasks:

  - name: show male's list
    debug:
      msg: Mr.{{item.key}}'s age is {{item.value.age}}
    loop: "{{ query('dict', persons) }}"
    when: item.value.sex == 'male'

  - name: show female's list
    debug:
      msg: Miss.{{item.key}}'s age is {{item.value.age}}
    loop: "{{ query('dict', persons) }}"
    when: item.value.sex == 'female'
#+END_SRC

*** TODO Loading in Custom Facts
*** Applying ‘when’ to roles, imports, and includes

#+BEGIN_SRC yaml
- hosts: webservers
  roles:
     - role: debian_stock_config
       when: ansible_os_family == 'Debian'
#+END_SRC

*** Register variables
#+BEGIN_SRC yaml
- name: test play
  hosts: all

  tasks:

      - shell: cat /etc/motd
        register: motd_contents

      - shell: echo "motd contains the word hi"
        when: motd_contents.stdout.find('hi') != -1
#+END_SRC

*** TODO conditional Imports
*** TODO Selecting Files and Templates based on variables

** TODO Playbook & Roles
** Resuable

*** Ways

3 ways to split large playbook into seperate files

1. =include=
2. =imports=
3. =roles=

*** comparision

- =roles= can package variable, handler, module, plugins
- =import=: static including which process during parsing time
- =include=: dynamic including which happen during runtime

** Error Handling

- Playbook will fail fast at return error as default behavior
- We can changed the default action
- use ~ignore_errors: yes~ to ignore errors of task
- reactivate unreachable hosts with ~meta: clear_host_errors~
- force to trigger handdle even errors happen by set ~force_handler: True~
- use =failed_when: <clause>= to program which state means failed
  + output with "FAILED": =failed_when: "'FAILED' in command_result.stderr"=
  + based on return code: =failed_when: diff_cmd.rc == 0 or diff_cmd.rc >= 2=
- Modified the =changed= status by custom judge, such as ~changed_when: "bass_result.rc != 2"~
- Abort the play by set =any_errors_fatal: true=

** Best Practice

*** Content Organization

**** Directory Layout

#+BEGIN_SRC text
production                # inventory file for production servers
staging                   # inventory file for staging environment

group_vars/
   group1.yml             # here we assign variables to particular groups
   group2.yml
host_vars/
   hostname1.yml          # here we assign variables to particular systems
   hostname2.yml

library/                  # if any custom modules, put them here (optional)
module_utils/             # if any custom module_utils to support modules, put them here (optional)
filter_plugins/           # if any custom filter plugins, put them here (optional)

site.yml                  # master playbook
webservers.yml            # playbook for webserver tier
dbservers.yml             # playbook for dbserver tier

roles/
    common/               # this hierarchy represents a "role"
        tasks/            #
            main.yml      #  <-- tasks file can include smaller files if warranted
        handlers/         #
            main.yml      #  <-- handlers file
        templates/        #  <-- files for use with the template resource
            ntp.conf.j2   #  <------- templates end in .j2
        files/            #
            bar.txt       #  <-- files for use with the copy resource
            foo.sh        #  <-- script files for use with the script resource
        vars/             #
            main.yml      #  <-- variables associated with this role
        defaults/         #
            main.yml      #  <-- default lower priority variables for this role
        meta/             #
            main.yml      #  <-- role dependencies
        library/          # roles can also include custom modules
        module_utils/     # roles can also include custom module_utils
        lookup_plugins/   # or other types of plugins, like lookup in this case

    webtier/              # same kind of structure as "common" was above, done for the webtier role
    monitoring/           # ""
    fooapp/               # ""
#+END_SRC

**** Alternative Directory Layout

Alternatively you can put each inventory file with its
group_vars/host_vars in a separate directory. This is particularly
useful if your group_vars/host_vars don’t have that much in common in
different environments. The layout could look something like this:

#+BEGIN_SRC text
  inventories/
     production/
        hosts               # inventory file for production servers
        group_vars/
           group1.yml       # here we assign variables to particular groups
           group2.yml
        host_vars/
           hostname1.yml    # here we assign variables to particular systems
           hostname2.yml

     staging/
        hosts               # inventory file for staging environment
        group_vars/
           group1.yml       # here we assign variables to particular groups
           group2.yml
        host_vars/
           stagehost1.yml   # here we assign variables to particular systems
           stagehost2.yml

  library/
  module_utils/
  filter_plugins/

  site.yml
  webservers.yml
  dbservers.yml

  roles/
      common/
      webtier/
      monitoring/
      fooapp/
#+END_SRC

**** Use Dynamic Inventory With Clouds
**** How to Differentiate Staging vs Production

1. 按业务分组（如 webserver, dbserver）
2. 按区域分组（如 atlanta, boston）

例如

#+BEGIN_SRC ini
# file: production

[atlanta-webservers]
www-atl-1.example.com
www-atl-2.example.com

[boston-webservers]
www-bos-1.example.com
www-bos-2.example.com

[atlanta-dbservers]
db-atl-1.example.com
db-atl-2.example.com

[boston-dbservers]
db-bos-1.example.com

# webservers in all geos
[webservers:children]
atlanta-webservers
boston-webservers

# dbservers in all geos
[dbservers:children]
atlanta-dbservers
boston-dbservers

# everything in the atlanta geo
[atlanta:children]
atlanta-webservers
atlanta-dbservers

# everything in the boston geo
[boston:children]
boston-webservers
boston-dbservers
#+END_SRC

**** Group And Host Variables

变量定义顺序为

1. group all
2. group vars
3. host vars

可以为同一个主机的多个组分别设置变量

**** Top Level Playbooks Are Separated By Role

1. 在 site.yml 中导入相关业务 yaml
   #+BEGIN_SRC yaml
   ---
   # file: site.yml
   - import_playbook: webservers.yml
   - import_playbook: dbservers.yml
   #+END_SRC

2. 在具体 yaml 中引用 roles
   #+BEGIN_SRC yaml
     ---
     # file: webservers.yml
     - hosts: webservers
       roles:
         - common
         - webtier
   #+END_SRC

3. 使用时，可以指定 yaml 文件，并使用 =--limit= 过滤主机 
   #+BEGIN_SRC yaml
     ansible-playbook site.yml --limit webservers
     ansible-playbook webservers.yml
   #+END_SRC



**** Task And Handler Organization For A Role

- Role 中将 task 与 handler 分在两个目录中

**** What This Organization Enables (Examples)

#+BEGIN_SRC bash
  # working on production inventory
  ansible-playbook -i production site.yml

  # To reconfigure NTP on everything:
  ansible-playbook -i production site.yml --tags ntp

  # To reconfigure just my webservers:
  ansible-playbook -i production webservers.yml

  # For just my webservers in Boston:
  ansible-playbook -i production webservers.yml --limit boston

  # For just the first 10, and then the next 10:
  ansible-playbook -i production webservers.yml --limit boston[0:9]
  ansible-playbook -i production webservers.yml --limit boston[10:19]

  # And of course just basic ad-hoc stuff is also possible:
  ansible boston -i production -m ping
  ansible boston -i production -m command -a '/sbin/reboot'

  # confirm what task names would be run if I ran this command and said "just ntp tasks"
  ansible-playbook -i production webservers.yml --tags ntp --list-tasks

  # confirm what hostnames might be communicated with if I said "limit to boston"
  ansible-playbook -i production webservers.yml --limit boston --list-hosts
#+END_SRC

- =--tags=: filter with tag
- =-i <inventory>=
- =--limit=: filter hosts
- =ansible -m=: adhoc stuff
- =--list-tasks=: list tasks names
- =--list-hosts=: list hosts names to play



*** Use a separate inventory file for staging and production
*** TODO Rolling Updates

Understand the ‘serial’ keyword
*** Always Mention The State
*** TODO Group By Roles
Don't repeat yourself.
*** Operating System and Distribution Variance

Dynamic group basing on operation system and distribution variance

#+BEGIN_SRC yaml
  ---

   # talk to all hosts just so we can learn about them
   - hosts: all
     tasks:
       - group_by:
           key: os_{{ ansible_distribution }}

   # now just on the CentOS hosts...

   - hosts: os_CentOS
     gather_facts: False
     tasks:
       - # tasks that only happen on CentOS go here
#+END_SRC

*** Bundling Ansible Modules With Playbooks

Playbook can have it's own =./library= directory for modules that will automatically be in the ansible module path.
*** Whitespace and Comments

Generous use of whitespace to break things up, and use of comments (which start with ‘#’), is encouraged.

*** Always Name Tasks
*** Keep It Simple
*** Version Control

- Use version control. Keep your playbooks and inventory file in git
- commit when you make changes to them

*** TODO Variables and Vaults

- for the sake of =grep= tools
- define all variables in =/vars=
- overwrite sensitive variables to the =/valut= file

* Role

** Overview

*** What is Role

Roles are ways of automatically loading certain vars_files, tasks, and handlers based on a known file structure.

*** Why Role?

For sharing roles with others (encapsulation)

*** Directory Structure

- Contains specific sets of directory
- Each directory contains a =main.yml= configuration file

** Directory Explain

- tasks :: contains the main list of tasks to be executed by the role.
- handlers :: contains handlers, which may be used by this role or even anywhere outside this role.
- defaults :: default variables for the role (see Variables for more information).
- vars :: other variables for the role (see [[Variable]] for more information).
- files :: contains files which can be deployed via this role.
- templates :: contains templates which can be deployed via this role.
- meta :: defines some meta data for this role. See below for more details.

** Tasks & Roles

- Task can import other tasks by =import_tasks= and =when= clause
- Task can import other roles by =include_role= or =import_role=
- Tasks are defined under the =role/task/main.yml=

** TODO Modules & Plugins Embed

** Usage

- Playbook choose the roles with =roles= keyword
- If the =roles/x/{tasks,handlers,vars,defaults,meta,script,copy,template}= directory exists, do something
- =meta= configured the behaviour of role

** Playbook executions order

1. Any =pre_tasks= defined in the play.
2. Any =handlers= triggered so far will be run.
3. Each role listed in =roles= will execute in turn. Any role dependencies defined in the roles =meta/main.yml= will be run first, subject to tag filtering and conditionals.
4. Any =tasks= defined in the play.
5. Any =handlers= triggered so far will be run.
6. Any =post_tasks= defined in the play.
7. Any =handlers= triggered so far will be run.

** Dependencies

- Role can depend other roles
- include them in =meta/main.yml=
- Execute before current role


** Search Path

1. =role= directory, relative to the playbook file
2. By default, in =/etc/ansible/roles=


** Misc

- Duplicated roles in playbook would be execute only once (if not be changed in meta)
- Default Values as the fallback of =vars=
- Roles in playbook can be tagged with =tags= command

* Modules

** group

** user

** copy

** file

- Change permission
- Create directory

** TODO fetch

** command

** TODO shell

** cron

** yum

** apt
** systemd
** service

** TODO git
** TODO script

script at local?

** lineinfile

This module ensures a particular line is in a file, or replace an existing line using a back-referenced
regular expression. This is primarily useful when you want to change a single line in a file only.

Something like =sed= or vim replacement.

** TODO async-status

* Tags
* Misc

** Log types

1. with SSH Key
2. Ask for password =--ask-pass=
3. Switch to other user (=sudo=) with =--ask-become-pass=

** Disable host-key

Disable =host-key-checking= for
1. host information change in =know_hosts=
2. first time to login a ssh server

** =ansible all -m setup=

Get all hosts' =facts= 

** background execute

- =-B 3600=: run in background for most 3600s
- =-P= for polling
** TODO ansible-doc
** TODO ansible-pull
** TODO =ansible_os_family=

** TODO =debug= 
** Yaml Syntax

1. (optional) start with =---= and end with =...=
2. Starts with ="- "= to express list
3. ~key:value~ for mapping
4. Boolean literal: =yes=, =no=, =True=, =TRUE=, =false=
5. Span multiple lines with '|' and '>' 
   1. '|' to keep newline
   2. '>' converts newline to space
6. comment line with '#'
7. use ={{}}= for variable substitute
   1. yaml use =: {}= for dictionary defnition
   2. so quote ="{{}}"= for variable
8. Be careful for literal convertion for float and boolean value!







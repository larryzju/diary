* Overview

Automation server for automate all sorts of tasks related to building,
testing, and delivering/deploying software.

User defines *pipeline* by specify 
- agent
- steps
- environment variables

Jenkins will 
- start executor and run the steps
- record and aggregate test results (=post.always.junit()=)
- archive artifacts
- cleaning up at the end of Pipeline's execution
- notification

** execution environment

=agent= directive tells jenkins where and how to execute the Pipeline

** blue ocean

** plugins

** Jenkinsfile

* Terms

+ pipeline :: make up of multiple steps to build, test and deploy applications
  + node :: machine to execute a Pipeline
  + stage :: a block defines a conceptually distinct subset of tasks of entrie Pipeline
  + step :: A single task
+ agent :: where and how to execute the Pipeline
+ executor :: execute step if itself is available
+ workspace :: contain source files as well as any additional working files for the Pipeline
+ artifacts :: files generated during the execution of the Pipeline

* Agent

Several ways to define agents for use in Pipeline
- docker container

** Docker container
#+BEGIN_SRC groovy
agent {
    docker { image 'node:7-alpine' }
}
#+END_SRC

* Notification

| method  | key word   | description             |
|---------+------------+-------------------------|
| Email   | mail to    | to, body, subject       |
| Hipchat | hpchatSend | message, color          |
| Slack   | slackSend  | message, color, channel |

* Pipeline

** Basic

Pipeline provides an extensible set of tools for modeling
simple-to-complex delivery pipelines "as code" via the SDL syntax.

- Stage
- Steps
- Directive

** Pipeline as Code

Pipeline-as-code (=Jenkinsfile=) provides a number of immediate benefits
- Automatically creates a Pipeline build process for all branches and pull requests
- Code review/iteration on the Pipeline
- Audit trail for the Pipeline
- Single source of truth for the Pipeline

** Why Pipeline?

The reasons to use Pipeline are
- Code: Implemented in code and mamanged with VCS
- Durable: is regardless the Jenkins master restarts
- Pausable: can optionally stop and wait for human inputor approval
- Versatile: features like: fork/join, loop, parallel
- Extensible: custom extensions and custom options

** Way to create Pipeline

- Blue Ocean :: Blue Ocean Wizard helps to generate =Jenkinsfile=
- Classic UI :: by UI
- SCM :: write and save =Jenkinsfile= in VCS repo

** Note

- Need to install *Pipeline Plugin* before using the Pipeline

** Problem

- every pipeline can be expressed with Pipeline script?

** syntax

There're two types of syntax
1. declarative
2. scripted

Declarative Pipeline is a more recent feature which
- provides richer syntactical features over Scripted Pipeline syntax
- is deisgned to make writing and reading Pipeline code easier.

*** basic

#+BEGIN_SRC groovy
pipeline {
    agent any 
    stages {
        stage('Build') { 
            steps {
                // 
            }
        }
        stage('Test') { 
            steps {
                // 
            }
        }
        stage('Deploy') { 
            steps {
                // 
            }
        }
    }
}
#+END_SRC

1. Execute this Pipeline on "any" available agent
2. Three stages "Build", "Test" and "Deploy" will be executed one by one

*** environment

1. to configure the build or tests differently to run them inside of Jenkins
2. set or override "dummy" credentials in build or test scripts

#+BEGIN_SRC groovy
pipeline {
    agent any

    environment {
        DISABLE_AUTH = 'true'
        DB_ENGINE    = 'sqlite'
    }

    stages {
        stage('Build') {
            steps {
                sh 'printenv'
            }
        }
    }
}
#+END_SRC
*** wrapper

1. timeout
2. retry

#+BEGIN_SRC groovy
pipeline {
    agent any
    stages {
        stage('Deploy') {
            steps {
                retry(3) {
                    sh './flakey-deploy.sh'
                }

                timeout(time: 3, unit: 'MINUTES') {
                    sh './health-check.sh'
                }
            }
        }
    }
}
#+END_SRC

*** finishing up

Define clean-up steps in =pipeline.post= (similar to =swtich= expression)

#+BEGIN_SRC groovy
pipeline {
    agent any
    stages {
        stage('Test') {
            steps {
                sh 'echo "Fail!"; exit 1'
            }
        }
    }
    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}
#+END_SRC

*** recording tests and artifacts

#+BEGIN_SRC groovy
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh './gradlew build'
            }
        }
        stage('Test') {
            steps {
                sh './gradlew check'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'build/libs/**/*.jar', fingerprint: true
            junit 'build/reports/**/*.xml'
        }
    }
}
#+END_SRC

*** options

#+BEGIN_SRC groovy
pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying'
            }
        }
    }
}
#+END_SRC

*** interactive

#+BEGIN_SRC groovy
pipeline {
    agent any
    stages {
        /* "Build" and "Test" stages omitted */

        stage('Deploy - Staging') {
            steps {
                sh './deploy staging'
                sh './run-smoke-tests'
            }
        }

        stage('Sanity check') {
            steps {
                input "Does the staging environment look ok?"
            }
        }

        stage('Deploy - Production') {
            steps {
                sh './deploy production'
            }
        }
    }
}
#+END_SRC

** Global Variable Reference

- env :: for example: =env.PATH= or =env.BUILD_ID=
- params :: for example: =params.MY_PARAM_NAME=
- currentBuild :: for example =currentBuild.result=

* How to

** Define a Simple Pipeline
1. install Pipeline plugin
2. new Item with Pipeline type
3. fill the Pipeline script and save
4. click "Build Now" and run the pipeline
5. Click job #id and go to "Console Output" to see the full output from the Pipeline run

** Define a SCM based Pipeline

1. Install Pipeline Plugin
2. new Item with Pipeline type
3. define pipeline script from SCM
4. choose the type of source control system of the repo contain your =Jenkinsfile=

** Generator Snippet

1. visit *Pipeline Sytnax* page at https://jenkines-host:8080/pipeline-syntax
2. select the desired step in the *Sample step* dropdown menu
3. use the dynamically populated area below the *Sample Step* dropdown to configure the selected step
4. click *Generate Pipeline Script* to create a snippet of Pipeline and copy the snippet into a pipeline

** TODO Export Jenkinsfile

** TODO Parallel steps

** TODO Custom SCM polling trigger

* What is

** groovy

** Pipeline vs Project vs Job
** Smoke Test
** End-to-End Test
** Single source of truth

* Reference

- [[https://jenkins.io/doc/book/pipeline/][Pipeline (User Handbook)]]
- [[https://jenkins.io/doc/book/pipeline/getting-started/][Getting Started with Pipeline]]

#+TITLE: 杂记


* Rob Pike, Less is More

** Go 的设计承继

Go 以 C 为原型，以 C++ 为目标设计，最终却与两者大相径庭

作者认为

1. 编写软件时应设计一门更适合解决这个问题的编程语言
2. C++ 编译慢，而标准委员会试图加入更多的新特性
3. 简化 C++ 可能比加入新特性是更大的成就

作者于 80 年代设计 Newsqueak 语言，Go 的一些设计由中而来

** Go 语言特点

- GC
- 无头文件
- 明确的依赖，无循环依赖
- 大写可见性
- 任何类型都有方法
- 没有子类继承
- 没有类型转换
- 接口的隐式实现
- 嵌入机制
- =i++= 是 statement，而不是 expression
- 没有指针运算
- 初始化为零值
- 没有 =this=
- 分段的堆栈
- 没有 static 等修饰符
- 没有异常

** Go vs C++/Java

C++/Java 的核心是类的层次和分类，而 Go 的核心是 composition（组合）

#+BEGIN_QUOTE
大软件需要确定的理念，但强依赖管理、整洁的接口、抽象化以及优秀的文档工具这些更为重要！不幸的是，这些没一个是C++的强项（不过这点Java明显就好得多）。
#+END_QUOTE

Go 中有一些特有的机制

- slice
- map
- composite literal
- top level of file
- reflection
- gc
- concurrent

** 泛型

关于 Go 的泛型问题，作者认为这可以通过类型系统来完成，而不需要额外的多态或原语


** 为什么Go从头到尾都是以C++为目标来设计的却无法吸引到C++程序员？

#+BEGIN_QUOTE
Joke认为，这可能是因为Go和C++的设计理念相差甚大吧。

C++希望所有解决方案都能很容易得到/使用。我在C++11 FAQ（常见问题）上看到了这句话：

  C++能够优美地、灵活地并且零成本地表现出抽象事物的能力，相比专门编写的代码要高效很多。
这种思考方式和Go的运转方式并不一样 。零成本不是目标，至少零CPU成本不是。Go的目标是解放程序员！

Go并没有包罗万象，你不要期待它什么都有，你也无法精确地控制每一个细节。例如：Go没有RAII，但是你可以使用一个垃圾清理器做替代，虽然你甚至无法使用内存释放函数。

你可以从Go中得到很多易于理解但是强大的工具集来组合出问题的解决方案。它跟别的语言比起来也许没有那么快或者精致，但肯定写起来更简单、读起来更容易，也更易于理解，也许还更安全。

从另一个角度看，Go肯定更加简化：

Python和Ruby程序员转向Go是因为他们不需要学更多的关心却可以获得更好的性能，甚至还可以使用并发特性。

C++程序员不愿意转向Go是因为他们竭尽全力只为了对自己的程序的完全掌控，并不希望这样改变。对于他们，软件并不仅是完成工作，而是做好工作。

现在的问题在于，如果Go成功了，会颠覆他们的世界观。

而且我们应该在一开始就注意到：对C++11新特性感兴趣的人是不会对一个功能如此简洁的语言感兴趣的，即使它能完成更多的任务
#+END_QUOTE

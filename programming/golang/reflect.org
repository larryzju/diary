* laws of reflection

Note of [[https://blog.golang.org/laws-of-reflection][laws of reflection]]

** Introduction

Program can examine its own structure with =reflect= through *types*. (Metaprogramming)

** Type & Interfaces

Go is static type language.

=type MyInt int= define new type "MyInt" which is different from int even
they have the same underlying type.

*interface* type is a special type, which can hold concrete value that 
satisfied the interface's method prototypes.

=interface{}= can store any type of value. But it's still static type
language.

** The representation of an interface

Interface keeps tuple informations: =(value, concrete type)=

With interface variable, we can only call the methods in interface prototype.
Such as =r.read()=.

The concrete value can define much more methods, we need to declare
(convert) it to another interface to use these methods normally use 
*type assertion syntax*
#+BEGIN_SRC go
w = r.(io.Writer)
#+END_SRC

Empty interface can be assigned any type of value without type asserting.
#+BEGIN_SRC go
var empty interface{}
empty = w
#+END_SRC

** Law1. Reflection goes from interface value to reflection object

#+BEGIN_SRC go
  package main

  import (
          "fmt"
          "reflect"
  )

  func main() {
          var x float64 = 3.6
          fmt.Println("type:", reflect.TypeOf(x))
          fmt.Println("value:", reflect.ValueOf(x).String())


          v := reflect.ValueOf(x)
          fmt.Println("type:", v.Type())
          fmt.Println("kind is float64:", v.Kind() == reflect.Float64)
          fmt.Println("value:", v.Float())
  }
#+END_SRC

- Use =reflect.TypeOf= gets value's type. The =x= is convert to empty
  interface first and =reflect.TypeOf= unpacks that empty interface to
  recover the type information.

- Use =reflect.ValueOf= gets interface's value

- =Value= has lots of methods to let use examine and manipulate them
  + =Type=
  + =Kind= describes the underlying type, not the static type
  + =Int=, =Float= to grab values

** Law2. Reflection goes from reflection object to interface value

Repack =(value, concrete type)= to =interface= which can be seen as a
inverse of the `ValueOf` function.

The result is always of static type  =interface{}=

#+BEGIN_SRC go
  package main

  import (
          "fmt"
          "reflect"
  )

  func main() {
          var x int32
          x = 10240

          v := reflect.ValueOf(x)
          fmt.Printf("%.2e", float64(v.Interface().(int32)))
  }
#+END_SRC

** Law3. To modifiy a reflection object, the value must be settable

Before set the value with reflect, call =CanSet= on the =Value=

We can modify the reflect value only if its not the copy for the raw
value. (Similar to pass parameters to function by value or by reference).

#+BEGIN_SRC go
  package main

  import (
          "fmt"
          "reflect"
  )

  func main() {
          var x int32 = 1024
          v := reflect.ValueOf(&x)
          fmt.Println(v.CanSet())
          t := v.Elem()
          fmt.Println(t.CanSet())
          t.SetInt(2048)
          fmt.Println(t)
          fmt.Println(x)
  }
#+END_SRC
** Struct

#+BEGIN_SRC go
  package main

  import (
          "fmt"
          "reflect"
  )

  type T struct {
          Foo string
          bar string
  }

  func main() {
          t := T{"Hello", "world"}
          s := reflect.ValueOf(&t).Elem()
          s.Field(0).SetString("Aloha")
          // can not set unexport field
          // s.Field(1).SetString("世界")
          fmt.Println(t)
  }
#+END_SRC

#+BEGIN_SRC go
  // iterator all fields in struct
  typeOfT := s.Type()
  for i := 0; i < s.NumField(); i++ {
          f := s.Field(i)
          fmt.Printf("%d: %s %s = %v\n", i,
                  typeOfT.Field(i).Name, f.Type(), f.Interface())
  }
#+END_SRC

* foreword

#+BEGIN_QUOTE
No mater what kind of code you are writing now, Rust empowers you to
reach farther, to program with confidence in a wider variety of
domains that you did before.
#+END_QUOTE

Breaks down barriers
- eliminate the old pitfalls (memory mamangement, concurrency, data representation)
- providing a friendly, polished set of tools
- guide you naturally towards reliable code, efficient in terms of speed and memory usage
- introduce parallelism with low-risk

* introduction

Over all of Rust
- help you write faster, more reliable software
- high-level ergonomic with low-level control support

** Who Rust is For

- teams of developers: compiler can detect elusive bugs, including concurrency bugs
  + cargo: dependency manager and build tool
  + rustfmt: format to certain coding style
  + IDE integration
- student: to learn about operation system development
- companies: cli, web service, devops tool, embedded device, audio/video analysis, IoT, matchines learning
- open source developer

** Who This Book Is For

** How to Use This Book

Reading in sequence from front to back.

Two types of chapter
1. concept chapter (chapter 2, 12, 20)
2. project chapter

Outlines
1. install rust, how to use cargo, run "hello world" program
2. introduction to rust
3. dedicated features of rust
4. ownership system
5. structures and methods
6. enum, =match= expression, =if let= control flow construct
7. module system, privacy rule, API
8. data structure of stdlib: vectors, strings, hash maps
9. error-handling
10. generics, traits, lifetimes
11. testing
12. =grep=
13. closure and iterators
14. cargo in deep
15. smart pointers
16. concurrent programming
17. rust idioms (vs OOP)
18. patterns and matches
19. advance topics: unsafe rust, macro, etc.
20. web server

* Getting Started

** Installation

Use =rustup= command line tool to manage rust versions and associated tools

- =rustup update=
- =rustup self uninstall=
- =rustc --version= check version
- =rustup doc= open local documentation in your browser

** hello, World!

Steps
1. create project directory
2. write rust program =main.rs=, using an underscore to separate words in name
3. compile with =rustc main.rs=
4. run =./main=

Explain
- =main= function is the entrypoint
- use =rustfmt= fto format code
- indent with 4 spaces, not a tab
- ~println!~ is a macro
- compile /ahead-of-time/

#+BEGIN_QUOTE
Everything is a trade-off in language design.
#+END_QUOTE

** Hello, Cargo!

Cargo is the build system and package manager.

Use =cargo --version= to check the version.

Commands
- create project with =cargo new hello=
  1. =Cargo.toml= is the configuration of project (like go.mod for golang)
     1. package info
     2. dependencies: refer to crates (library)
  2. =src/main.rs= contain a simple hello world program already
- build with =cargo build=
  1. binary is generate at =target/debug/hello=
  2. =Cargo.lock= keeps track of the exact version of dependencies
- or we can run the code directly with =cargo run=
- use =cargo check= to validate code (faster)
- =cargo build --release= to generate final binary (with optimization)



* TODO Programming a Guessing Game

* [0/5] Common Programming Concepts

** TODO Variables and Mutability

** TODO Data Types

** TODO Functions

** TODO Comments

** TODO Control Flow

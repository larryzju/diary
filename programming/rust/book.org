* foreword

#+BEGIN_QUOTE
No mater what kind of code you are writing now, Rust empowers you to
reach farther, to program with confidence in a wider variety of
domains that you did before.
#+END_QUOTE

Breaks down barriers
- eliminate the old pitfalls (memory mamangement, concurrency, data representation)
- providing a friendly, polished set of tools
- guide you naturally towards reliable code, efficient in terms of speed and memory usage
- introduce parallelism with low-risk

* introduction

Over all of Rust
- help you write faster, more reliable software
- high-level ergonomic with low-level control support

** Who Rust is For

- teams of developers: compiler can detect elusive bugs, including concurrency bugs
  + cargo: dependency manager and build tool
  + rustfmt: format to certain coding style
  + IDE integration
- student: to learn about operation system development
- companies: cli, web service, devops tool, embedded device, audio/video analysis, IoT, matchines learning
- open source developer

** Who This Book Is For

** How to Use This Book

Reading in sequence from front to back.

Two types of chapter
1. concept chapter (chapter 2, 12, 20)
2. project chapter

Outlines
1. install rust, how to use cargo, run "hello world" program
2. introduction to rust
3. dedicated features of rust
4. ownership system
5. structures and methods
6. enum, =match= expression, =if let= control flow construct
7. module system, privacy rule, API
8. data structure of stdlib: vectors, strings, hash maps
9. error-handling
10. generics, traits, lifetimes
11. testing
12. =grep=
13. closure and iterators
14. cargo in deep
15. smart pointers
16. concurrent programming
17. rust idioms (vs OOP)
18. patterns and matches
19. advance topics: unsafe rust, macro, etc.
20. web server

* Getting Started

** Installation

Use =rustup= command line tool to manage rust versions and associated tools

- =rustup update=
- =rustup self uninstall=
- =rustc --version= check version
- =rustup doc= open local documentation in your browser

** hello, World!

Steps
1. create project directory
2. write rust program =main.rs=, using an underscore to separate words in name
3. compile with =rustc main.rs=
4. run =./main=

Explain
- =main= function is the entrypoint
- use =rustfmt= fto format code
- indent with 4 spaces, not a tab
- ~println!~ is a macro
- compile /ahead-of-time/

#+BEGIN_QUOTE
Everything is a trade-off in language design.
#+END_QUOTE

** Hello, Cargo!

Cargo is the build system and package manager.

Use =cargo --version= to check the version.

Commands
- create project with =cargo new hello=
  1. =Cargo.toml= is the configuration of project (like go.mod for golang)
     1. package info
     2. dependencies: refer to crates (library)
  2. =src/main.rs= contain a simple hello world program already
- build with =cargo build=
  1. binary is generate at =target/debug/hello=
  2. =Cargo.lock= keeps track of the exact version of dependencies
- or we can run the code directly with =cargo run=
- use =cargo check= to validate code (faster)
- =cargo build --release= to generate final binary (with optimization)



* TODO Programming a Guessing Game

* [4/5] Common Programming Concepts

** DONE Variables and Mutability

Variables are immutable by default. The advantages are
- safety: once bound to a name, you can't change the value
- easy concurrency that Rust offers

Assign value to immutable variable gets compile-time error.  This
makes sure you don't need to keep track of how and where value might
change. Your code is thus easier to reason through.

#+BEGIN_QUOTE
Even though compiler errors can be frustrating, they only mean your
program isn't safely doing what you want it to do yet; they do not 
mean that you're not a good programmer!
#+END_QUOTE

You can declare variable as mutable
#+BEGIN_SRC 
let mut x = 5;
#+END_SRC

Using mutable variables might make the code more convenient to write.
For example, to reduce copying, implement data structure

#+BEGIN_QUOTE
There are multiple trade-offs to consider in addition to the
prevention of bugs.
#+END_QUOTE


*** Differences Between Variables and Constants

1. cannot modify constants with =mut=
2. constant is declared with =constant= while variable is declared with =let=
3. constant must declared with type of the value ~const MAX_POINT: u32 = 100_000;~
4. constant can be declared in any scope (global or local)
5. constant can only be set to a constant expression (compile time)
6. constant variable name is usually named in UPPERCASE with underscores

*** Shadowing

Declare variable with =let= for multiple times, the previous one will
be shadowed.

It's different from the =mut= but defines multiple variables shadowing
each ones appeared before. The variable is still immutable.

It's legal to define variables in the same name but with different
types.

#+BEGIN_NOTE
It seems a bit weird to define variables in different types with the
same name.  

It works like C++, the overloaded variable has suffix =_str= or =int=
underlying, but can be accessed with the raw name.
#+END_NOTE

** DONE Data Types

Data types tells Rust what kind of data is being specified so it knows
how to work with that data.

There are two data type subsets
1. scalar
2. compound

Rust is a /statically typed/ language, it know the types of all
variables at compile time.

You must add a type annotation. Otherwise compile will complain =no_type_annotation=
#+BEGIN_SRC rust
let guess: u32 = "42".parse().expect("Not a number!");
#+END_SRC

*** Scalar Types

Rust has 4 primary scalar types
1. integers
2. floating-point
3. boolean
4. characters

**** Integer Types

| length  | signed | unsigned |
|---------+--------+----------|
| 8-bit   | i8     | u8       |
| 16-bit  | i16    | u16      |
| 32-bit  | i32    | u32      |
| 64-bit  | i64    | u64      |
| 128-bit | i128   | u128     |
| arch    | isize  | usize    |

Note on signed and unsigned types
- =i8= can store numbers from $-(2^7)$ to $2^7 -1$
- =u8= can store numbers from $0$ to $2^n - 1$

Integer literal can be wrote like
- =98_222= (=_= is a visual separator)
- =0xff=
- =0o77=
- =0b1111_0000=
- =b'A'= (u8 only)

Rust checks integer overflow under debug mode, throw panic if it
happens. For release mode, Rust performs /two's complement wrapping/.
- use =wrapping_*= method to do calculate in wrap mode explicitly
- use =checked_*= methods to check overflow
- use =overflowing_*= methods to wrap values and get if it's overflow
- use =saturating_*= methods to saturate at the value's minimum or
  maximum values


**** Floating-Point Types

Two subsets
- =f32=
- =f64= (default, on modern CPUs it's roughly the same speed as =f32=
  but is capable of more precision)


#+BEGIN_SRC rust
  fn main() {
      let x = 2.0; // f64
      let y: f32 = 3.0; // f32
  }
#+END_SRC


**** Numeric Operations

operations: =+=, =-=, =*=, ~/~, ~%~

**** The Boolean Type

Booleans are one byte in size: true or false

#+BEGIN_SRC rust
  fn main() {
      let t = true;
      let f: bool = false; // with explicit type annotation
  }
#+END_SRC

**** The Character Type

Four bytes in size and represents a Unicode Scalar Value: 'z', 'å¤©'

***** TODO character vs Unicode

*** Compound Types

Two primitive compound types
- tuples
- arrays

**** The Tuple Types

Features
- fixed length
- can have different types for each element
- use pattern matching to destructure a tuple value; or access with the index (python attribute)

Example
#+BEGIN_SRC rust
  fn main() {
      let tup = (500, 6.4, 1);
      let (x,y,z) = tup;
      let one = tup.2;
      print!("The value of y is: {}", y);
  }
#+END_SRC

**** The Array Type

Features
- every element of an array must have the same type
- fixed length (like Go)
- allocated on the stack rather than the heap (?)

Vector is a type to provide dynamic size array.


#+BEGIN_SRC rust
  let a: [i32; 5] = [1,1,1,1,1];  // type is i32, length is 5
  let b: [1; 5]; // same with above one
#+END_SRC


***** Accessing Array Elements

#+BEGIN_SRC 
a[0];
#+END_SRC

***** Invalid Array Element Access

Cause a /runtime/ error about "index out of bounds".

As a low-level language, C/C++ will not capture such error. Rust
protects you against this kind of error by immediately exiting instead
of allowing the memory access and continuing.

** DONE Functions

basics
- main is the entry point
- define function with =fn= keyword
- name function and variable in /snake case/ style
- the order of function definition doesn't matter

*** Function Parameters

/parameters/ vs /arguments/:
- parameter is the special variables that are part of a functions' signature
- argument is the concrete values
- they can be used interchangeably in casual conversation

#+BEGIN_SRC rust
  fn main() {
      foo();
  }

  fn foo(x: i32) {
      println!("The value of x is: {}", x);
  }
#+END_SRC


*** Function Bodies Contain Statements and Expressions

Rust is an expression-based language.

The differences between statements and expressions are
- statements are instructions that perform some action and do not return a value
- expression evaluate to resulting value

Example
- ~let y = 6;~ is a statement which doesn't return values
- function definitions are also statements

Note: C and Ruby returns value of assignment. That is not the case in Rust.

The following intructions are expression
1. literal 6
2. algorithm: =6+8=
3. function calling
4. macro calling
5. block {} is an expression

#+BEGIN_SRC rust
  let y = {
      let x = 3;
      x + 1  // no semicolon to the end, or the block turns to be a statement, that's some wierd
  };
#+END_SRC


*** Functions with Return Values 

Feature
- declare type after an arrow ~->~
- by default return the final expression in the block of funciton body
- or return explicitly with =return= keyword


#+BEGIN_SRC rust
  fn five() -> i32 {
      5
  }
#+END_SRC

**** TODO does Rust support multiple return values?

** DONE Comments

Comment with =//= prefix.

Rust also has another kind of ocmment: documentation comments.

** TODO Control Flow

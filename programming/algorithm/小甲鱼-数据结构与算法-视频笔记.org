#+TITLE: 小甲鱼-数据结构与算法-视频教程笔记
#+AUTHOR: Zhao WenBin

* Roadmap

- [0/1] 绪论
- [0/1] 谈谈算法
- [0/3] 时间和空间复杂度
- [7/17] 线性表
- [0/7] 栈与队列
- [0/70] 其它

* 线性表

线性表是一个有限的有序数列，每一个元素都有唯一有前驱和唯一的后继（除开头和结尾）

元素具有相同的数据类型。

** 抽象数据类型 ADT

相当于 class，指数学模型及定义在其上的一系列方法。抽象相对于具体，只指定其接口，而没有实现。

通过 ADT 提供的基本方法可以组合出更加复杂的操作

*** 为什么有类型

1. 适应不同的应用场景
2. 节省空间（有限精度，如 =int= 和 =long= ）

*** 类型分类

1. 原子类型
2. 组合类型

** 常用操作

- init
- clean
- isEmpty
- get(i)
- locate(v)
- insert(v)
- delete(v)
- length

** 例子

- =union(L1,L2)=

** 实现方式

有两种存储结构来实现线性表
1. 顺序表，使用连贯的内存地址来存放数据，需要记录数据的长度和空间的容量
2. 链式表，不需要连续地址存放数据，用一个指针域指向下一个后继元素


*** TODO 顺序表

实现参见代码 [?]()

优点:
1. 空间紧凑（因为隐式地使用了地址作为下标）
2. 快速存取

缺点：
1. 容量固定，扩容可能造成“碎片”化
2. 插入、删除开销大


*** TODO 链式表

包括两个基本域：数据域和指针域

习惯上留置一个头结点作为列表开头，可以在其数据域中存储列表的长度，这样有助于统一列表的访问接口。通过头结点可以访问整个链表，尾指针指向空（null）

单链表的建立方式
1. 头插法，新建节点指向头节点，将链表指向新建节点，生成链表元素顺序与插入顺序相反
2. 尾插法，维护一个临时的指向链表最后一个元素的 node，每次向 node.next 加入新元素，并将 node 后移

单链实现代码如下所示（go 语言）

#+INCLUDE: "/Users/larry/go/src/github.com/larryzju/fishc-go/linkedlist.go" src go

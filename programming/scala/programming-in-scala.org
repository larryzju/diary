#+TITLE: note on "programming in scala 2ed"
#+AUTHOR: zhaowenbin


* Chapter 1

** Why scala?

*** 简洁性与可扩展性

 在不同规模上的编程需求是不一样的。

 - 对于小的程序，简洁（比如有 Map 的语法支持，省略参数类型）等是重要特性。
 - 同时需要能够更细致地控制底层实现（在保证语法简洁的前提下）
 
**** 扩展基本类型

一个重要的方面是语法的 **重载** ，使新增加的库能够以通用的语法来调用

**** 扩展控制结构

以 Erlang 的消息传递方式，在 scala 中以 actor 方式来实现
* Chapter 6. Functional Object

functional object 指 objects that don't have any mutable state，
即符合函数式的对象类型

** A specification for class =Rational=

以实现一个分数类 Rational 为例，要求支持四则运算（操作符重载），其状态不可变

** Constructing a =Rational=

- scala class 支持参数，称为 class parameter
- scala 将 body 中非 field 和 method definition 作为主构造器
- 简化了 java 中手写构造函数
- 同 case class 一样，不一定要有 body
- class parameter 仅在初始化构造中可见

*** immutable object 的特点

- 优势
  + 无可变状态
  + 不用去通过拷贝来保证引用安全
  + 线程安全
  + 可以作为 hash table key
- 劣势
  + 修改只能通过拷贝，影响性能

实际使用时，需要在 mutable 和 immutable 中作出折衷

** Reimplementing to =toString= method

- 重载 =toString= 方法， ~override def toString = ...~
- 类比于 python 中的 =__str__= 或 =__repr__= 函数重载
- 是一种协议 (protocol) ，没有理由

** Check preconditions

- 在构造函数中对参数进行检查，并抛出异常
- =Predef= 包中包含了多种方法，如 =require=, =assert= 等
- =require= 抛出异常 =IllegalArgumentException=

** Adding Fields

如上所说，class parameter 仅用于 constructor (scala compiler will not emit fields of them)

如要作为成员变量访问，需要在 body 中赋值为新的变量

** Auxiliary Constructors

- 除了 primary constructors 的构造器被称为 *辅助构造器*
- 定义 =this(...)= 的多态函数
- 但必须调用主构造器或其它构造器来完成初始化
- scala 不同于 java，只有主构造器中可以调用 superclass constructor

** Private fields and methods

使用 =private= 修饰符来修饰 =val= 或 =def= 定义 [fn:1]

** Defining Operators

可以用 ~def + (...) {...}~ 直接重载操作符

有以下特点
- 不同于 python，python 重载的是 =__add__= 方法
- 不用加 override 修饰符
- 类似于 clojure/lisp，因为 scala 放宽了对标识符的限制
- 需要使用多态，来满足对不同类型的操作
- =x+y= 等价为 =x.+(y)=
- 重载操作符不会修改算子的优先级顺序

** Identifiers in Scala

scala 中标识符命名相对自由

1. 普通变量
   - =alnum + $= ， =$= 由 scala 编译器使用
   - 用 CamelCase 命名，避免使用下划线风格（与解析有关）
   - 类和 Trait 应该以大写字母开头
   - Constant 以在写字母开头
2. operator identifier，如 =+=, =:::=, =#=, =:->=
3. mixed identifier，如 =unary_+= 或 =myvar_=
4. literal identifier，用于使用一些保留字，如 =Thread.`yield`()=


** Method Overloading

- Overload: each name is been used by multiple methods
- 静态编译时展开（被选择）
- 当编译器因为类型模糊无法选择，报 ambiguous reference error

** Implicit Conversion

通过操作符重载可以让 Rational 对象与整数进行计算 =r*2= ，但如果反过来 =2*r= 则不能用。
因为 Int 为标准类型，我们无法在应用中重载标准库的方法。

Scala 的解决方法是: Create an implicit conversions that automatically converts
integers to rational numbers when need.

在 *当前 scope* 中定义一句 ~implicit def intToRational(x:Int) = new Rational(x)~
编译器将会对 Int 进行隐式转换。

参见 [[Chapter 21. Implicit Conversions and Parameters][Chapter21]] 关于隐式转换的详细说明

*** TODO 问题

1. 隐式转换的机制是什么
2. 命名是否有要求？
3. 开销有多大
4. 是否会出现匹配错误的问题？


** A word of caution

- Bear in mind that with power comes resposibility
- 谨慎使用操作符重载和隐式转换，避免造成额外的心智负担
- 在追求简洁性的同时，保证可读性和易理解性
- Conciseness will often be a big part of that readability, but you can take conciseness too far.

** Conclusion

- 本章的主要内容有：类参数、辅助构造器、方法重载、隐式转换
- [[Chapter 21. Implicit Conversions and Parameters][Chapter 21]] 中提供了有关隐式转换的详细说明
- [[Chapter 30. Object Equality][Chapter 30]] 提到两个特殊的、需要被重载的方法 =equals= 和 =hashCode=


* Chapter 8. Functions and closures

** scala functions vs java functions

1. 对象的方法（类比于 java 静态方法）
2. functions nested within function（闭包）
3. function literal（sugar）
4. function value（first class function）

** local functions

- 将函数功能限制在专门的范围，减少代码量，易维护，可重用
- 避免 helper 函数（从一个函数调用另一个函数）污染 namespace
- 同 java，可以添加 =private= 关键字来控制访问范围
- scala 中可以在函数中嵌套定义函数，用作 local function
- local function 可以认为是闭包的实际用法

** function literal & function value

语法示例如下：

#+BEGIN_SRC scala
(x:Int, y:Int) => x+y
#+END_SRC

不同于 java 中的 method

- scala 中 function literal 被编译成 class，实例化后为一个 function value
- function value 既是对象，也可以当作函数来调用（protocol?）
- 底层扩展实现了 =FunctionN= trait

** short forms of function literals

1. 在具体的调用处，可以省略类型，由编译器作类型推导。如 ~seq.filter((x) => x > 0)~
2. 单参数时省略括号。如 ~seq.filter(x => x > 0)~

** placeholder syntax

- 可以用 ='_'= 来代指参数
- 必要时需要指定参数类型，如 ~val = (_:Int) + (_:Int)~
- 注意上例中，是两个参数，而非同一个

** partially applied functions                                    :attention:

- 类似于 python, clojure 中的偏函数
- 有特殊的语法 ~val a = println _~
- 上例中 '_' 代指整个参数列表（注意中间的空格）
- 注意：a 相当于 println 函数的 wrap，不是同一个函数
- 注意： *scala 中的 method 不能被赋给变量!!!*
  #+BEGIN_SRC scala
  val c = sum // error
  #+END_SRC
- 可以预先指定部分参数如
  #+BEGIN_SRC scala
  def sum(a: Int, b: Int, c: Int) = a + b + c
  val a = sum(1, _: Int, 3)
  a(2) // => 6
  #+END_SRC

** closure

*** 定义

The function value (object) that's created at runtime from its function literal is called a *closure*

闭包生成时，保存了当前环境（environment/scope）以及变量绑定情况。

*** 分类

按是否有自由变量(free variable) 分为两种
1. 无自由变量，称为 closed term，是闭包的特殊情况
2. 有自由变量，称为 open term

*** 补充

scala 中自由变量在闭包生成后改变，会被闭包感知到。

Cause scala's closures capture variables themseleves, not the value to which variable refer.

*** TODO 讨论: 闭包引入自由变量是否会造成多线程安全问题？

- 闭包多用在函数式风格中，自由变量不可变
- 与引用类型和值类型有关（scala 中相当于引用类型，会发生改变）
- 多线程通过闭包访问同一引用类型可能会出问题

** Special function call forms

*** repeated parameter

- 类比于 C 中的 vargs，或 clojure 中的 =&= ， 或 python 中的 =*=
- 函数定义语法上写作 ~def echo(args: String*) = for(arg <- args) println(arg)~
- 函数调用语法上写作 ~echo(arr: _*)~ ， 其中 arr 本身是 =Array[T]= 类型（类比于 clojure apply）

*** named arguments

按参数名传参，可改变顺序，如 ~speed(distance=100,time=10)~

*** default parameter value

函数定义时提供默认参数，配合 named arguments 使用更佳

** Tail recursive

- tail-recursive function will not build a new stack frame for each calls; all calls will execute in a single frame
- scalac 中加参数 ~-g:notailcalls~ 禁用尾递归优化（方便调试）
- 受 JVM 限制，对间接调用递归模式，scala 编译器无法进行优化







* TODO Chapter 21. Implicit Conversions and Parameters
* TODO Chapter 30. Object Equality

* Footnotes

[fn:1] 是否有 =protect= 修饰符？

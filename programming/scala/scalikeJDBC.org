#+TITLE: scalikeJDBC 笔记

* question

- [ ] Commons DBCP
- [ ] c3p0 though ConnectionPool implementation
- [ ] =ConnectionPool.singleton=
- [ ] =implicit val session = AutoSession=


* dependencies

- scalikeJDBC
- jdbc driver
- slf4j implementation


* example

#+BEGIN_SRC scala
import scalikejdbc._

// initialize JDBC driver & connection pool
Class.forName("org.h2.Driver")
ConnectionPool.singleton("jdbc:h2:mem:hello", "user", "pass")

// ad-hoc session provider on the REPL
implicit val session = AutoSession

// table creation, you can run DDL by using #execute as same as JDBC
sql"""
create table members (
  id serial not null primary key,
  name varchar(64),
  created_at timestamp not null
)
""".execute.apply()

// insert initial data
Seq("Alice", "Bob", "Chris") foreach { name =>
  sql"insert into members (name, created_at) values (${name}, current_timestamp)".update.apply()
}

// for now, retrieves all data as Map value
val entities: List[Map[String, Any]] = sql"select * from members".map(_.toMap).list.apply()

// defines entity object and extractor
import java.time._
case class Member(id: Long, name: Option[String], createdAt: ZonedDateTime)
object Member extends SQLSyntaxSupport[Member] {
  override val tableName = "members"
  def apply(rs: WrappedResultSet) = new Member(
    rs.long("id"), rs.stringOpt("name"), rs.zonedDateTime("created_at"))
}

// find all members
val members: List[Member] = sql"select * from members".map(rs => Member(rs)).list.apply()

// use paste mode (:paste) on the Scala REPL
val m = Member.syntax("m")
val name = "Alice"
val alice: Option[Member] = withSQL {
  select.from(Member as m).where.eq(m.name, name)
}.map(rs => Member(rs)).single.apply()
#+END_SRC

* 流程

1. init jdbc driver
2. init connection pool
3. implicit session ( AutoSession )

* API

- =SQL.{execute,update,list,map,single}.apply=
- =extends SQLSyntaxSupport[T]=
- Type-safe SDL，<case class> as name，类似于 spark sql api

* 特点

- SDL
- 纯 scala 语法
- transcation control
  - DB autoCommit { implicit session => ...}
  - DB localTx { implicit session => ...}
  - DB withinTx { implicit session => ...}
  - DB readOnly { implicit session => ...}
- Useful Query Inspections：显示 executed sql debug 信息
- testing support











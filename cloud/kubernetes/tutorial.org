#+TITLE: Notes On [[https://kubernetes.io/docs/tutorials/][Kubernetes Tutorial]]
#+AUTHOR: Zhao WenBin

* Basic
** Cluster Structure

*** Explain k8s in one sentence

 Kubernetes is a production-grade, open-source platform that orchestrates the
 placement (scheduling) and execution of application containers within and
 across computer clusters.

*** Master and nodes

 Masters manage the cluster and the nodes are used to host the running applications
 - Kubernetes cluster runs containerized application which is not
   dependent to host environment
 - There's process named =kubelet= running on each node which will
   communicate with master and operate to local virtual infrastructure
   (docker/rkt/...)

*** TODO cluster-interactive

 google doc can not been seen
** Deploy an App

*** Basic

 A Deployment is responsible for creating and updating instances of your application

*** Container Backend
    
 Applications need to be packaged into one of the supported container formats in order to be deployed on Kubernetes.

*** Note

 - =kubectl= is a command line tools, which interactive with server use API. Similar to =beeline= for hive
 - After deployment, deployment controller is responsible for self-healing and recover from failure
 - Kubernetes provides extra features such as *scale* and *update*

*** TODO Interactive

 Google doc can not been seen...

 - ~kubectl run --image=... --port=...~ to make a new deployment
 - ~kubectl get deployment~ to see the deployment
 - Can also see running process with ~kubectl get pod~
 - ~kubectl proxy~ to forward http request to inner-cluster network

** Explore Your App

*** Pods

 A Pod is a group of one or more application containers( such as Docker or rkt) and 
 includes shared storage (volumes), IP Address and information about how to run them.

 Containers in pod are relatively tightly coupled, they would be co-located and co-scheduled,
 and have shared context.

 The Pod will be act as a atomic unit and *always* run on a single Node.

*** Note


- A Pod always runs on a Node. (for shared context maybe?)
- Multiple Pods can run on one Node
- Every node runs at least a kubelet and a container runtime (like Docker, rkt)
- Containers should only be scheduled together in a single Pod if they
  are tightly coupled and need to share resource such as disk

**** TODO Interactive

 Google doc can not be seen...

** Expose Your App Publicly

User =services= to expose application services in Pod.

A Kubernetes Service is an abstraction layer which defines a logical
set of Pods and enables external traffic exposure, load balancing and
service discovery for those Pods.

Service filters pod with labels attach to it:
- =kubectl get= has option =-l= to select label
- ~kubectl label pod <pod-name> key=value~ to set label

*** TODO Best Practice

You can create a Service at the same time you create a Deplyment by using *=--expose=* in kubectl
#+BEGIN_SRC bash
  kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
#+END_SRC

- what's the mean of =deployment=?
- NAT forward 8080 port to other port with internal IP

*** Services Type

- ClusterIP: internal IP
- NodePort: NAT
- LoadBalancer: external IP
- ExternalName: CNAME (with *kube-dns*?)

*** Delete Service

- Use ~kubectl delete service -l <label-selector>~ to delete service
- After service was deleted, the Pod is running 

*** TODO Note

 Google Docs can not been seen...

 - Pod has lifecycle, can be died (when node failed?).
 - =ReplicationController= will create new Pod for recovery from failure automatically
 - Service proxy/expose request to multiple Pod, and also provide route traffic functional
 - Pods with the same =Label= can be found by =LabelSelector=
 - Use =kubectl get servies= list the current Services

*** TODO Future Read

- [[https://kubernetes.io/docs/tutorials/services/source-ip/][Using Source IP]]
- [[https://kubernetes.io/docs/concepts/services-networking/connect-applications-service][Connecting Applications with Services]]

** Scale Your App

*** =kubectl scale= command

 #+BEGIN_SRC bash
   kubectl scale deployments/kubernetes-bootcamp --replicas=4
 #+END_SRC

 - The scaled Pods has difference IP address (can be check by =kubectl get pods -o wide=)
 - Request to service will be route to different Pods
 - Count of replica can be reduce, some Pods will be terminated.

*** TODO Note

 Google docs can not been seen...

 - Deploy with multiple instance using =-replicas= parameters
 - Duplicated Pods will be created
 - Service will route traffic to different Pods for performance
 - Monitor endpoint(?) to ensure the traffic is sent only to available Pods.
 - Can be used for Rolling Update
 - How to keep the consistent of data?

** Update Your App

Rolling updates allow Deployments' update to take place with zero
downtime by incrementally updating Pods instances with new ones

If a Deployment is exposed publicly, the Service will load-balance the
traffic only to available Pods during the update

*** TODO Usage

Google docs can not been seen...

*** Update Deployment's image

 use =set image= command change image (specific deployment and new image)

 #+BEGIN_SRC bash
   kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
 #+END_SRC

*** TODO Rollout Status

 #+BEGIN_SRC bash
   kubectl rollout status deployments/kubernetes-bootcamp
 #+END_SRC

*** TODO Revert

 #+BEGIN_SRC bash
   kubectl rollout undo deployments/kubernetes-bootcamp
 #+END_SRC

 - zero downtime rolling update with similar policy as scaling
 - update is versioned
 - can be reverted to previous version
 - useful for CI/CD (Integration/Delivery)

* Configuration

** Configuring Redis using a ConfigMap

*** Basic Step

1. create ConfigMap from local file
   #+BEGIN_SRC bash
     kubectl create configmap example-redis-config --from-file=redis-config
   #+END_SRC
2. check Configmap
   #+BEGIN_SRC bash
     kubectl get configmap example-redis-config -o yaml
   #+END_SRC
3. Use ConfigMap (dump configmap to mounted file) for Pod. The pod spec looks like:
   #+BEGIN_SRC yaml
     apiVersion: v1                  # version number
     kind: Pod
     metatdata:
       name: redis
     spec:
       containers:
       - name: redis                 # Container redis
         image: kubernetes/redis:v1  # Image
         env:                        # set environment variables
         - name: MASTER
           value: "true"
         ports:
         - containerPort: 6379
         resources:
           limits:
             cpu: "0.1"
         volumeMounts:
         - mountPath: /redis-master-data
           name: data                # mount Volume(data) to /redis-master-data
         - mountPath: /redis-master 
           name: config              # mount Volume(config) to /redis-master
       volumes:
         - name: data
           emptyDir: {}
         - name: config              # define new volume named `config`
           configMap:                # `configMap` is a type of volume
             name: example-redis-config # configMap name as identity
             items:
             - key: redis-config
               path: redis.conf      # configMap's path, will be mounted to `<mountPath>/redis.conf`
   #+END_SRC
*** Note

- ConfigMap is a config file
- Act as backend of Volume
- Can be mounted to Container as a file, which content is the ConfigMap settings

*** TODO Why use ConfigMap?

/ConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable./

Is there any backend to mount local file as a Volume to containers??

*** [[https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/][Configure a Pod to Use a ConfigMap]]

**** Overview 

- ConfigMap act as register table.
- Can be create from file, directory
- ConfigMap's value can be used by Pods as volume mount or command substitutioin

**** Create a ConfigMap

- use =kubectl create configmap <map-name> <data-source>= to create configmaps
- can based from directories, files or literal values
- parameters of ~--from-file~ can be directories or files
- ~--from-env-file~ can load property file's content
- ~--from-file~ can be formed as ~key=path~, key will be acted as =<path-to-file>=
- ~--from-literal~ can be passed multple times to specific key-value pairs

**** Define container environment variables using ConfigMap data

1. First create ConfigMap =special-config= with kv pair ~special.how=<value>~
2. Create Pod with settings looks like (env =SPECIAL_LEVEL_KEY= will be replaces with ConfigMap's =<value>= of ~special.how~)
   #+BEGIN_SRC yaml
     apiVersion: v1
     kind: Pod
     metadata:
       name: dapi-test-pod
     spec:
       containers:
         - name: test-container
           image: k8s.gcr.io/busybox
           command: [ "/bin/sh", "-c", "env" ]
           env:
             # Define the environment variable
             - name: SPECIAL_LEVEL_KEY
               valueFrom:
                 configMapKeyRef:
                   # The ConfigMap containing the value you want to assign to SPECIAL_LEVEL_KEY
                   name: special-config
                   # Specify the key associated with the value
                   key: special.how
       restartPolicy: Never
   #+END_SRC

**** Configure all key-value pairs in a ConfigMap as container environment variables

Use =envFrom= to define all of the ConfigMap's data as container environment variables
   
#+BEGIN_SRC yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: dapi-test-pod
  spec:
    containers:
      - name: test-container
        image: k8s.gcr.io/busybox
        command: [ "/bin/sh", "-c", "env" ]
        envFrom:
        - configMapRef:
            name: special-config
    restartPolicy: Never
#+END_SRC
   
**** Use ConfigMap-defined environment variables in Pod commands

Like shell variable substitutioin syntax, use =$(VAR_NAME)=. For example

#+BEGIN_SRC yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: dapi-test-pod
  spec:
    containers:
      - name: test-container
        image: k8s.gcr.io/busybox
        command: [ "/bin/sh", "-c", "echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)" ]
        env:
          - name: SPECIAL_LEVEL_KEY
            valueFrom:
              configMapKeyRef:
                name: special-config
                key: SPECIAL_LEVEL
          - name: SPECIAL_TYPE_KEY
            valueFrom:
              configMapKeyRef:
                name: special-config
                key: SPECIAL_TYPE
    restartPolicy: Never
#+END_SRC

**** Add ConfigMap data to Volume

- Act as volume backend
- Mount volume to =volumeMounts.mountPath=
- Set =key= and =path= to a specific path in the Volume


For example

#+BEGIN_SRC yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: dapi-test-pod
  spec:
    containers:
      - name: test-container
        image: k8s.gcr.io/busybox
        command: [ "/bin/sh", "-c", "ls /etc/config/" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
    volumes:
      - name: config-volume
        configMap:
          # Provide the name of the ConfigMap containing the files you want
          # to add to the container
          name: special-config
    restartPolicy: Never
#+END_SRC
#+BEGIN_SRC yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: dapi-test-pod
  spec:
    containers:
      - name: test-container
        image: k8s.gcr.io/busybox
        command: [ "/bin/sh","-c","cat /etc/config/keys" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
    volumes:
      - name: config-volume
        configMap:
          name: special-config
          items:
          - key: special.level
            path: keys            # mount file `/etc/config/keys` with contents of value of `special.level`
    restartPolicy: Never
#+END_SRC
**** Understand ConfigMaps and Pods

- ConfigMaps act as register table (key-value pairs storage)
- ConfigMaps can be consumed in pods (act as configuration for example)
- Must be created before using by Pods
- ConfigMaps reside in a specific namespace, so Pods use ConfigMaps must be in the same namespace

**** Note
   
- ConfigMap can be created use specification looks like these
  #+BEGIN_SRC yaml
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: special-config
      namespace: default
    data:
      special.how: very
  #+END_SRC
- When mount ConfigMap Volume to a mountpoint, other files under the mountpoint will be deleted!
- Mounted ConfigMaps are updated automatically in period

* [[https://kubernetes.io/docs/tutorials/stateless-application/expose-external-ip-address/][Stateless Applications]]

** Steps

1. Use =kubectl run= with =--replicas= parameter to specific pods count
   #+BEGIN_SRC bash
     kubectl run hello-world --replicas=5 --labels="run=load-balancer-example" --image=gcr.io/google-samples/node-hello:1.0  --port=8080
   #+END_SRC
2. Display deploy information
   #+BEGIN_SRC bash
     kubectl get deployments hello-world
     kubectl describe deployments hello-world
   #+END_SRC
3. Display ReplicaSet objects
   #+BEGIN_SRC bash
     kubectl get replicasets
     kubectl describe replicasets
   #+END_SRC
4. Create Service
   #+BEGIN_SRC bash
     kubectl expose deployment hello-world --type=LoadBalancer --name=my-service
   #+END_SRC
5. Display service 
   #+BEGIN_SRC bash
   kubectl get services my-service
   kubectl describe services my-service
   #+END_SRC
6. Use service
7. Cleanup
   #+BEGIN_SRC bash
     kubectl delete services my-services
     kubectl delete deployment hello-world
   #+END_SRC

** Deployments

See [[file:k8s.org::*Deployments][Concept/Deployments]]

** Note

* Useful commands

** version

** cluster-info
** get
- =-l= option to select label
*** nodes
*** pods
*** deployment
*** events
** run
** create
*** configmap
** TODO logs
** exec

Execute bash on the pod/container (seems to be useful for debug)

#+BEGIN_SRC bash
kubectl exec -it $POD_NAME bash
#+END_SRC
** label
** delete
** rollout
*** undo
*** status
* Problem

** TODO Difference between =kubectl apply= and =kubectl create=

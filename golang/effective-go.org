#+TITLE: Note on "Effective Go"
#+AUTHOR: 赵文彬

* Commentary

- 注释有行注释和块注释两种
- godoc 命令会根据注释内容生成文档
- 文档注释分为 package comment 和 doc comment
- 对于多文件的包，包注释只应出现在其中一个文件中
- 注释文档不会被进行格式化处理
- 每个导出的名称都应予以 doc comment 注释
- var 或 const 分组只注释一次

* Names

- 首字母大小写决定包外的可见性
- 骆驼命名法

** Package names

- 包名即变量的引用名
- 要求：short, concise, evocative
- 由小写字母构成
- 在使用时可以起别名，但在定义时不要求严格的唯一
- 习惯上，package name 与源目录一致
- 导入的名称是完整路径
- 函数名不必再重复 package name
- Long names don't automatically make things more readable. A helpful doc comment can often be more valuable than an extra long name.

** Getter

- Go 不自动提供 getter 和 setter
- 习惯以 =Owner= 而非 =GetOwner= 表示 getter
- 以 =SetOwner= 来表示 setter

** Interface name

- 单方法接口以方法名加 'er' 后缀来命名
- 接口名不应与常用函数（Read，Writer，Close，Flush）重名

* 分号

- Go 理论上用分号来分隔语句，但一般不写在源码里
- lexer 会自动插入分号
- 在行结尾为 newline, number 或 string 常量，或符号 =break=, =continue=, =fallthrough=, =return=, =++=, =--=, =)=, =}= 被插入分号
- if the newline comes after a token that could end a statement, insert a semicolon.
- Go 中的分号一般只出现在 for 循环中，会用分隔三个条件
- 一行内的多个 statement 可以用分号来分隔
- 不能将 '(' 放在新的一行

* 控制结构

** 基础

- 没有 =do .. while= 循环
- 通用的 =for=
- 更有弹性的 =switch=
- =if= 和 =switch= 包含一个可选的初始化
- =break= 和 =continue= 可以指定一个 label
- 新的 type switch 控制结构
- select 控制结构


** for range

- range 用于迭代 array, slice, string, map 及 channel
- 若只需要迭代 key 或 index，则 for 中只带一个迭代参数
- 若只需要第二个值，可以使用 =_=
- 对 string 迭代，返回 rune (UTF8) 和 pos
- 对于无法识别的字符，返回 =U+FFFD= 特殊字符






** swtich

- 不加条件，可以构造 =if-elsif-else= 分支
- case 中可以写多条件（用逗号分隔）
- 可以使用 break, 默认为每个 case 加入 break

** type switch

- discover the dynamic type of an interface variable
- 语法是 =t.(type)=

** 其它

*** Redeclaration and reassignment

- 通过 ~:=~ 来进行申明时，变量 v 可以多次出现
- 但至少在申明列表中有一个新的变量
- 用于简化赋值与申明的语法切换

*** 与 C 的不同

- Go 中没有 =++= 和 =--= 操作
- Go 中没有 comma operator，但可以进行多赋值





* 函数

** 多返回值

- 避免像 C 中通过返回 -1，并修改指针内容来表示错误，和错误信息
- 多个返回值中可以设计上下文缓存，模拟 python yield

** 具名返回参数

- 函数初始化时，返回参数被初始化为零值
- 在裸 return 时，返回当时返回参数的值
- 可以作为手册，说明返回参数的信息

** Defer

- 用于保证资源被释放
- 在有多个 return 分支时，常会忘记释放的情况
- 在打开处进行关闭注册，代码更加清晰
- defer 函数参数立即被展开
- defer 可以多次调用，函数按 FILO 执行





* Data
** New

- 申请空间有两个原语 =new= 和 =make=
- new 仅用于申请空间并赋零值 ，但不会调用初始化过程
- 返回类型为 =*T= ，表示指向 T 类型变量所在的位置
- 设计类型时，尽可能让零值有意义



** Make

- 只用于创建 slice, map 和 channel
- 返回一个被初始化的值（类型为 T）
- 与 new 进行区别，是因为有些类型变量需要进行初始化
- =make([]int, 10, 100)= 返回一个 slice, 容量为 100，长度为 10
- 可以忽略长度： ~v := make([]int, 100)~

** 构造字面量

- composite literal
- 可以指定局部成员，可以乱序，如 ~&File{fd:fd, name:name}~
- 可以完全不写成员值，以初始化空值
- 可以用于初始化 array, slice, map
- 数组类初始化，field 名称直接被忽略


** Arrays

- 与 C 的数组不同，在 Go 中
  + Array are value, 赋值相当于拷贝
  + 将 array 作为函数的参数，会对值进行拷贝
  + The size of an array is part of its type: ~[10]int~
- 为了提高效率，函数参数需要以指针传入，避免拷贝
- 一般用 slice 来替代直接使用 array


** Slices

- 对 arrays 的封装
- 更通用，功能更强，接口更方便
- 大部分应用场景下都应使用 slice 来替代 array
- slice 是引用，赋值不会拷贝
- slice 隐含有长度（和容量）信息
- slice 的长度可以扩展，受底层 array 容量的限制
- 要改变 slice 长度，只需要对其切片赋值到新的 slice
- 内置有 append 函数






** Two-dimensional slices

- 例如 ~type linesOfText [][]byte~
- slice 是变长的，所以内部（第二维） slice 可以是变长的
- 二维数组实现有两种方式
  1. 独立申请第二维 slice，类似 C 中指针数组
  2. 对一维数组中切片，适用于固定长度



** Maps

- key 可以是定义了 equality operator 的任意类型
- key 可以是 interface 类型的
- slice 不可以作为 key
- map 是引用类型，会被函数修改
- ？？copy, deepcopy
- 类型写作 =map[string]int= ，表示 string 类的键指向 int 类的值
- 取不存在的键，返回零值
- 返回两个值，后一个作为是否存在的标志
- delete 删除 map 中的成员，不存在也不会报错








** Printing

- 常用的函数有 =fmt.{Printf,Fprintf,Sprintf}=
- Println 插入空格和换行， Print 插入空格
- Fprint 等函数的文件对象需要实现 =io.Writer= 接口
- 常用文件如 =os.Stdout= 或 =os.Stderr=
- =%d= 不能像 C 一样带修饰符
- =%v= 作 default conversion，可打印复合结构，如 array, slice, struct, map
- 对于结构体, =%v= 显示值， =%+v= 显示键和值， =%#v= 以 Go 语法来显示键和值
- =%q=, 指 quote，用于 =string= 或 =[]byte=
- =%#q= 使用 backquote 来作为引用符
- =%x= 可应用于 =string=, =[]byte=
- =% x= 可以在 hex 中插入空格
- =%T= 打印变量的类型
- 通过实现 =T.String()= 方法来提供默认的格式化方法
- =func Printf( format string, v ...interface{} )(n int, err error)=
- v 是可变长参数列表，使用 =v...= 来展开（类似于 lisp apply）











** Append

- 示意如下 ~func append( slice []T, elements ...T)[]T~
- Go 不能实现对泛型的函数定义，因此 append 以内置函数实现
- ~append( x, y... )~ ，类似于 lisp 中的 =(append* a b)=

** 注意

- It's perfect OK to return the address of a local variable（涉及内存堆与栈的切换，以及 GC 的优化）


* 初始化

Go 比 C 或 C++ 更加强大，体现在：

  1. 复杂结构的构造
  2. 构造顺序问题

** Constants

- 在编译期被创建
- 只能是 number, rune, string, boolean 类型
- 必须是 constant expression （编译需要）
- 使用 =iota= 生成枚举， iota 是表达式

** variables

- 与 constant 语法类似
- 但在 run time 被初始化

** init function

- 每个源文件可以有自己的 =init= 函数
- 在所有变量初始化完成后，包被初始化后才会执行
- 常用于验证和修改状态






* Methods

** Pointers vs. Values

- methods can be defined for any named type ( except a pointer or an interface )
- 使用指针，方法可以直接修改 caller 本身
- value methods can be invoked on pointers and values; but pointers methods can only be invoked on pointers
- 对于可取地址的值，对其进行方法调用时，编译器用自动进行地址引用。因此 ~(&b).Write~ 可以简写为 ~b.write~



* Interfaces and other types

** Interfaces

- provider a way to specify the behavior of an object: _If something can do this, then it can be used there._
- 只有一到两个方法的 interface 属于常见
- 一个类型可以实现多个 interface 的方法，但不指定显示的继承实现路径

** Conversions

- 两个底层构造一致的对象可以相互转换
- 转换并不是要创建新的对象，而仅是类型（及方法）的转换说明
- 可以将对象的类型进行转换，以使用不同接口中的方法

** Interface conversions and type assertions

- type switch 有个常用的方式，对 interface 取 switch，在每个 case 中转换为相应的类型，进行具体的操作
- switch 条件为 =value.(type)=
- 通过 =value.(typeName)= 进行类型断言或转换
- 若无法转换，则会 crash with a run-time error
- 使用 "val, ok" 来测试是否能够正常转换

** Generality

- 若无 interface 以外的方法实现，类型便无意义
- 构造函数可以返回一个 interface 而非具体实现
- 通过对 interface 提供的接口进行开发，以实现抽象编程









** Interface and methods

_Almost anything can have methods attached, almost anythin can santisfy an interface_
* The Blank Identifier

- can be assigned or declared with any value of any type, with the value discarded harmlessly
- 用于 multiple assignment
- 用于 unused imports and variables，引用未使用的包或变量，以避免编译错误
- 用于 import for side effect，如 =import _ "net/http/pprof"=
- 用于 interface check，如 =var _ json.Marshaler = (*RamMessage)(nil)=
- 类型无需指出它具体实现了哪些接口，而去具体实现相应的方法，大部分转换都在编译时进行的
- 使用 =value.(type)= 进行 check，会在运行时进行
* Errors

- 正常情况通过多返回值来描述错误信息
- 错误类型为 =error= ，是一个内置的 interface，其中有 =Error()= 方法
- 除了简单的报错外，还可以提供一些上下文环境记录
- 调用者通过 type switch 或 type assertion 来区分 error 的具体类型

** Panic

- 对不可恢复的错误，使用 =panic= 来创建 runtime error，并停止程序执行
- panic 后可以跟任意类型，一般是字符串，会打印其错误信息
- 多场景都不应使用 panic

** Recover

- 当 panic 触发后，会立即停止当前函数的执行，展开 goroutine 的栈，执行 defer 注册的函数，栈处理完成后停止程序
- panic 流程中途用 recover 来恢复正常执行流程，recover 停下 goroutine 栈的展开
- recover 只可写在 deferred 函数的内部 

